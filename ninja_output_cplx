ninja: Entering directory `build'
[1/451] Compiling C object externals/cgns/libcgns.a.p/cgns_error.c.o
[2/451] Compiling C object externals/metis/libmetis.a.p/GKlib_fkvkselect.c.o
[3/451] Compiling C object externals/metis/libmetis.a.p/GKlib_b64.c.o
[4/451] Compiling C object externals/metis/libmetis.a.p/GKlib_rw.c.o
[5/451] Compiling C object externals/metis/libmetis.a.p/GKlib_util.c.o
[6/451] Compiling C object externals/metis/libmetis.a.p/GKlib_timers.c.o
[7/451] Compiling C object externals/metis/libmetis.a.p/GKlib_pdb.c.o
[8/451] Compiling C object externals/metis/libmetis.a.p/GKlib_fs.c.o
[9/451] Compiling C object externals/metis/libmetis.a.p/GKlib_random.c.o
[10/451] Compiling C object externals/metis/libmetis.a.p/GKlib_pqueue.c.o
[11/451] Compiling C object externals/metis/libmetis.a.p/GKlib_blas.c.o
[12/451] Compiling C object externals/metis/libmetis.a.p/GKlib_getopt.c.o
[13/451] Compiling C object externals/cgns/libcgns.a.p/cgns_io.c.o
[14/451] Compiling C object externals/metis/libmetis.a.p/GKlib_htable.c.o
[15/451] Compiling C object externals/metis/libmetis.a.p/GKlib_mcore.c.o
[16/451] Compiling C object externals/metis/libmetis.a.p/GKlib_tokenizer.c.o
[17/451] Compiling C object externals/metis/libmetis.a.p/GKlib_memory.c.o
[18/451] Compiling C object externals/metis/libmetis.a.p/GKlib_io.c.o
[19/451] Compiling C object externals/metis/libmetis.a.p/GKlib_string.c.o
[20/451] Compiling C object externals/metis/libmetis.a.p/GKlib_evaluate.c.o
[21/451] Compiling C object externals/metis/libmetis.a.p/GKlib_seq.c.o
[22/451] Compiling C object externals/metis/libmetis.a.p/GKlib_omp.c.o
[23/451] Compiling C object externals/metis/libmetis.a.p/GKlib_itemsets.c.o
[24/451] Compiling C object externals/metis/libmetis.a.p/GKlib_error.c.o
[25/451] Compiling C object externals/metis/libmetis.a.p/libmetis_frename.c.o
[26/451] Compiling C object externals/metis/libmetis.a.p/libmetis_timing.c.o
[27/451] Compiling C object externals/metis/libmetis.a.p/GKlib_csr.c.o
[28/451] Compiling C object externals/metis/libmetis.a.p/libmetis_meshpart.c.o
[29/451] Compiling C object externals/metis/libmetis.a.p/libmetis_bucketsort.c.o
[30/451] Compiling C object externals/metis/libmetis.a.p/GKlib_graph.c.o
[31/451] Compiling C object externals/cgns/libcgns.a.p/adf_ADF_interface.c.o
[32/451] Compiling C object externals/metis/libmetis.a.p/libmetis_mesh.c.o
[33/451] Compiling C object externals/metis/libmetis.a.p/libmetis_minconn.c.o
[34/451] Compiling C object externals/metis/libmetis.a.p/libmetis_util.c.o
[35/451] Compiling C object externals/metis/libmetis.a.p/libmetis_mmd.c.o
[36/451] Compiling C object externals/metis/libmetis.a.p/libmetis_refine.c.o
[37/451] Compiling C object externals/metis/libmetis.a.p/libmetis_balance.c.o
[38/451] Compiling C object externals/metis/libmetis.a.p/libmetis_checkgraph.c.o
[39/451] Compiling C object externals/metis/libmetis.a.p/GKlib_sort.c.o
[40/451] Compiling C object externals/cgns/libcgns.a.p/adf_ADF_internals.c.o
[41/451] Compiling C object externals/metis/libmetis.a.p/libmetis_contig.c.o
[42/451] Compiling C object externals/metis/libmetis.a.p/libmetis_fm.c.o
[43/451] Compiling C object externals/metis/libmetis.a.p/libmetis_compress.c.o
[44/451] Compiling C object externals/metis/libmetis.a.p/libmetis_srefine.c.o
[45/451] Compiling C object externals/metis/libmetis.a.p/libmetis_stat.c.o
[46/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_diffutil.c.o
[47/451] Compiling C object externals/metis/libmetis.a.p/libmetis_pmetis.c.o
[48/451] Compiling C object externals/metis/libmetis.a.p/libmetis_separator.c.o
[49/451] Compiling C object externals/metis/libmetis.a.p/libmetis_options.c.o
[50/451] Compiling C object externals/metis/libmetis.a.p/libmetis_kmetis.c.o
[51/451] Compiling C object externals/metis/libmetis.a.p/libmetis_parmetis.c.o
[52/451] Compiling C object externals/metis/libmetis.a.p/libmetis_fortran.c.o
[53/451] Compiling C object externals/metis/libmetis.a.p/libmetis_kwayrefine.c.o
[54/451] Compiling C object externals/metis/libmetis.a.p/libmetis_auxapi.c.o
[55/451] Compiling C object externals/metis/libmetis.a.p/libmetis_graph.c.o
[56/451] Compiling C object externals/metis/libmetis.a.p/libmetis_sfm.c.o
[57/451] Compiling C object externals/metis/libmetis.a.p/libmetis_wspace.c.o
[58/451] Compiling C object externals/metis/libmetis.a.p/libmetis_mincover.c.o
[59/451] Compiling C object externals/metis/libmetis.a.p/libmetis_mcutil.c.o
[60/451] Compiling C object externals/metis/libmetis.a.p/libmetis_initpart.c.o
[61/451] Compiling C object externals/metis/libmetis.a.p/libmetis_debug.c.o
[62/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_frename.c.o
[63/451] Compiling C object externals/metis/libmetis.a.p/libmetis_kwayfm.c.o
[64/451] Compiling C object externals/metis/libmetis.a.p/libmetis_coarsen.c.o
[65/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_pspases.c.o
[66/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_ctrl.c.o
[67/451] Compiling C object externals/metis/libmetis.a.p/libmetis_ometis.c.o
[68/451] Compiling C object externals/metis/libmetis.a.p/GKlib_gkregex.c.o
[69/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_comm.c.o
[70/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_redomylink.c.o
[71/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_mesh.c.o
[72/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_wave.c.o
[73/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_util.c.o
[74/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_timer.c.o
[75/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_remap.c.o
[76/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_rmetis.c.o
[77/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_balancemylink.c.o
[78/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_msetup.c.o
[79/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_stat.c.o
[80/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_gkmpi.c.o
[81/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_selectq.c.o
[82/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_node_refine.c.o
[83/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_xyzpart.c.o
[84/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_csrmatch.c.o
[85/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_renumber.c.o
[86/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_initmsection.c.o
[87/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_kmetis.c.o
[88/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_mdiffusion.c.o
[89/451] Compiling C object externals/metis/libmetis.a.p/libmetis_gklib.c.o
[90/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_graph.c.o
[91/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_ametis.c.o
[92/451] Linking static target externals/metis/libmetis.a
[93/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_wspace.c.o
[94/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_akwayfm.c.o
[95/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_gkmetis.c.o
[96/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_initbalance.c.o
[97/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_weird.c.o
[98/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_initpart.c.o
[99/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_move.c.o
[100/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_mmetis.c.o
[101/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_debug.c.o
[102/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_kwayrefine.c.o
[103/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_serial.c.o
[104/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_ometis.c.o
[105/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/FileSystem.cpp.o
[106/451] Compiling C object externals/parmetis/libparmetis.a.p/libparmetis_match.c.o
[107/451] Linking static target externals/parmetis/libparmetis.a
[108/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/FaceNeighborGeneratorAbstract.cpp.o
[109/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/szcombine.cpp.o
[110/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/MPIUtil.cpp.o
[111/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ClassicZoneWriterAbstract.cpp.o
[112/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/PartitionTecUtilDecorator.cpp.o
[113/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLOrderedZoneHeaderWriter.cpp.o
[114/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CUserDefinedSolution.cpp.o
[115/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CVerificationSolution.cpp.o
[116/451] Compiling C object externals/cgns/libcgns.a.p/cgnslib.c.o
[117/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/checkPercentDone.cpp.o
[118/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/MPIFileIOStream.cpp.o
[119/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/UnicodeStringUtils.cpp.o
[120/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ClassicZoneFaceNeighborWriter.cpp.o
[121/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ClassicZoneVariableWriter.cpp.o
[122/451] Compiling C object externals/cgns/libcgns.a.p/cgns_internals.c.o
[123/451] Linking static target externals/cgns/libcgns.a
[124/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/DataSetWriter.cpp.o
[125/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ClassicZoneHeaderWriter.cpp.o
[126/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/MPICommunicator.cpp.o
[127/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/tecio.cpp.o
[128/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ZoneWriterFactory.cpp.o
[129/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ZoneWriterFactoryMPI.cpp.o
[130/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/fileStuff.cpp.o
[131/451] Compiling C++ object Common/src/libSU2Common.a.p/fem_fem_cgns_elements.cpp.o
[132/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/FECellSubzoneCompressor.cpp.o
[133/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/writeValueArray.cpp.o
[134/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/FileStreamReader.cpp.o
[135/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLFEPartitionedZoneWriter.cpp.o
[136/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/Zone_s.cpp.o
[137/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLOrderedPartitionWriter.cpp.o
[138/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ZoneHeaderWriterAbstract.cpp.o
[139/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/FileIOStream.cpp.o
[140/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ZoneWriterAbstract.cpp.o
[141/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/MPIFileWriter.cpp.o
[142/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/NodeToElemMap_s.cpp.o
[143/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLOrderedPartitionedZoneWriterMPI.cpp.o
[144/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLFEPartitionedZoneHeaderWriter.cpp.o
[145/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/FieldData.cpp.o
[146/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/MinMaxTree.cpp.o
[147/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ClassicFEZoneConnectivityWriter.cpp.o
[148/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/importSzPltFile.cpp.o
[149/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/TecioTecUtil.cpp.o
[150/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/MPICommunicationCache.cpp.o
[151/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/TecioData.cpp.o
[152/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/AsciiOutputInfo.cpp.o
[153/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/DataSetWriterMPI.cpp.o
[154/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLOrderedPartitionedZoneHeaderWriter.cpp.o
[155/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ClassicFEZoneFaceNeighborGenerator.cpp.o
[156/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/MPIFileReader.cpp.o
[157/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ClassicOrderedZoneFaceNeighborGenerator.cpp.o
[158/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLOrderedPartitionedZoneWriter.cpp.o
[159/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/mpiDatatype.cpp.o
[160/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/FieldData_s.cpp.o
[161/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/IJKSubzoneInfo.cpp.o
[162/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/NodeMap.cpp.o
[163/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/Scanner.cpp.o
[164/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/IJKZoneInfo.cpp.o
[165/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ClassicFEZoneWriter.cpp.o
[166/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ORBFESubzonePartitioner.cpp.o
[167/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/IntervalTree.cpp.o
[168/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLFEPartitionedZoneWriterMPI.cpp.o
[169/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/FileStreamWriter.cpp.o
[170/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLFEPartitionWriter.cpp.o
[171/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ZoneVarMetadata.cpp.o
[172/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ClassicOrderedZoneWriter.cpp.o
[173/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/OrthogonalBisection.cpp.o
[174/451] Compiling C++ object Common/src/libSU2Common.a.p/basic_types_ad_structure.cpp.o
[175/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLOrderedZoneWriter.cpp.o
[176/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLFEZoneHeaderWriter.cpp.o
[177/451] Compiling C++ object Common/src/libSU2Common.a.p/.._include_parallelization_omp_structure.cpp.o
[178/451] Compiling C++ object Common/src/libSU2Common.a.p/.._include_parallelization_mpi_structure.cpp.o
[179/451] Compiling C++ object Common/src/libSU2Common.a.p/linear_algebra_CPastixWrapper.cpp.o
[180/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/SZLFEZoneWriter.cpp.o
[181/451] Compiling C++ object Common/src/libSU2Common.a.p/graph_coloring_structure.cpp.o
[182/451] Compiling C++ object Common/src/libSU2Common.a.p/linear_algebra_CSysVector.cpp.o
[183/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/exportSubzonePlt.cpp.o
[184/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/ZoneInfoCache.cpp.o
[185/451] Compiling C++ object Common/src/libSU2Common.a.p/linear_algebra_CSysSolve_b.cpp.o
[186/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_CLinearPartitioner.cpp.o
[187/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_printing_toolbox.cpp.o
[188/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/readValueArray.cpp.o
[189/451] Compiling C++ object Common/src/libSU2Common.a.p/wall_model.cpp.o
../Common/src/wall_model.cpp: In member function 'virtual void CWallModelLogLaw::WallShearStressAndHeatFlux(su2double, su2double, su2double, su2double, su2double, bool, su2double, bool, CFluidModel*, su2double&, su2double&, su2double&, su2double&)':
../Common/src/wall_model.cpp:399:94: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     const su2double fval = velExchange/u_tau0 - ((C - log(karman)/karman)*(1.0 - exp(-y_plus/11.0)
                                                                                              ^~~~
In file included from ../Common/src/../include/./parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/../include/./parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/../include/./parallelization/mpi_structure.hpp:37,
                 from ../Common/src/../include/wall_model.hpp:30,
                 from ../Common/src/wall_model.cpp:29:
../Common/src/../include/./parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/../include/./parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[190/451] Compiling C++ object Common/src/libSU2Common.a.p/linear_algebra_blas_structure.cpp.o
[191/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_CSquareMatrixCM.cpp.o
[192/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_C1DInterpolation.cpp.o
../Common/src/toolboxes/C1DInterpolation.cpp: In member function 'virtual void CAkimaInterpolation::SetSpline(const std::vector<cplx>&, const std::vector<cplx>&)':
../Common/src/toolboxes/C1DInterpolation.cpp:140:24: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   b[1] = (p[0] + p[1])/2;
                        ^
In file included from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/../../include/toolboxes/../option_structure.hpp:30,
                 from ../Common/src/toolboxes/../../include/toolboxes/C1DInterpolation.hpp:33,
                 from ../Common/src/toolboxes/C1DInterpolation.cpp:28:
../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/C1DInterpolation.cpp:142:28: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   b[n-2] = (p[n-2]+p[n-3])/2;
                            ^
In file included from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/../../include/toolboxes/../option_structure.hpp:30,
                 from ../Common/src/toolboxes/../../include/toolboxes/C1DInterpolation.hpp:33,
                 from ../Common/src/toolboxes/C1DInterpolation.cpp:28:
../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/C1DInterpolation.cpp:147:28: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       b[i] = (p[i-1]+p[i])/2 ;
                            ^
In file included from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/../../include/toolboxes/../option_structure.hpp:30,
                 from ../Common/src/toolboxes/../../include/toolboxes/C1DInterpolation.hpp:33,
                 from ../Common/src/toolboxes/C1DInterpolation.cpp:28:
../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/C1DInterpolation.cpp: In function 'std::vector<cplx> CorrectedInletValues(const std::vector<cplx>&, su2double, short unsigned int, const su2double*, short unsigned int, INLET_INTERP_TYPE)':
../Common/src/toolboxes/C1DInterpolation.cpp:196:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       Alpha = Inlet_Interpolated[nDim]*PI_NUMBER/180;
                                                  ^~~
In file included from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/../../include/toolboxes/../option_structure.hpp:30,
                 from ../Common/src/toolboxes/../../include/toolboxes/C1DInterpolation.hpp:33,
                 from ../Common/src/toolboxes/C1DInterpolation.cpp:28:
../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/C1DInterpolation.cpp:197:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       Phi = Inlet_Interpolated[nDim+1]*PI_NUMBER/180;
                                                  ^~~
In file included from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/../../include/toolboxes/.././parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/../../include/toolboxes/../option_structure.hpp:30,
                 from ../Common/src/toolboxes/../../include/toolboxes/C1DInterpolation.hpp:33,
                 from ../Common/src/toolboxes/C1DInterpolation.cpp:28:
../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/toolboxes/../../include/toolboxes/.././parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[193/451] Compiling C++ object Common/src/libSU2Common.a.p/linear_algebra_CSysSolve.cpp.o
[194/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_CSymmetricMatrix.cpp.o
[195/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CInviscidVortexSolution.cpp.o
../Common/src/toolboxes/MMS/CInviscidVortexSolution.cpp: In member function 'virtual void CInviscidVortexSolution::GetSolution(const su2double*, su2double, su2double*) const':
../Common/src/toolboxes/MMS/CInviscidVortexSolution.cpp:113:61: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double uInf   = VelInf*cos(thetaVortex*PI_NUMBER/180.0);
                                                             ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CInviscidVortexSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CInviscidVortexSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CInviscidVortexSolution.cpp:114:61: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double vInf   = VelInf*sin(thetaVortex*PI_NUMBER/180.0);
                                                             ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CInviscidVortexSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CInviscidVortexSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[196/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/MPINonBlockingCommunicationCollection.cpp.o
[197/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CIncTGVSolution.cpp.o
[198/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CMMSIncEulerSolution.cpp.o
[199/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CMMSIncNSSolution.cpp.o
[200/451] Compiling C++ object Common/src/libSU2Common.a.p/linear_algebra_CSysMatrix.cpp.o
[201/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CRinglebSolution.cpp.o
[202/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CMMSNSTwoHalfSpheresSolution.cpp.o
../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp: In member function 'virtual void CMMSNSTwoHalfSpheresSolution::GetMMSSourceTerm(const su2double*, su2double, su2double*) const':
../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:224:42: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t70 = (x * t52 * t44 / 0.2e1 + (-0.2e1 * t62 * t8 * t61 - t60) * t56 / 0.4e1) * TWall;
                                          ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:224:90: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t70 = (x * t52 * t44 / 0.2e1 + (-0.2e1 * t62 * t8 * t61 - t60) * t56 / 0.4e1) * TWall;
                                                                                          ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:265:43: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t176 = (y * t52 * t44 / 0.2e1 + (-0.2e1 * t62 * t17 * t61 - t168) * t56 / 0.4e1) * TWall;
                                           ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:265:93: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t176 = (y * t52 * t44 / 0.2e1 + (-0.2e1 * t62 * t17 * t61 - t168) * t56 / 0.4e1) * TWall;
                                                                                             ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:284:43: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t252 = (z * t52 * t44 / 0.2e1 + (-0.2e1 * t62 * t23 * t61 - t244) * t56 / 0.4e1) * TWall;
                                           ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:284:93: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t252 = (z * t52 * t44 / 0.2e1 + (-0.2e1 * t62 * t23 * t61 - t244) * t56 / 0.4e1) * TWall;
                                                                                             ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:329:40: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t399 = 0.1e1 / t42 / 0.4e1;
                                        ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:347:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t506 = (0.3e1 / 0.4e1 + t51 * t56 / 0.4e1) * TWall;
                                                       ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfSpheresSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[203/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CNSUnitQuadSolution.cpp.o
../Common/src/toolboxes/MMS/CNSUnitQuadSolution.cpp: In constructor 'CNSUnitQuadSolution::CNSUnitQuadSolution(short unsigned int, short unsigned int, short unsigned int, CConfig*)':
../Common/src/toolboxes/MMS/CNSUnitQuadSolution.cpp:53:42: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   flowAngle = config->GetAoA()*PI_NUMBER/180.0;
                                          ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CNSUnitQuadSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CNSUnitQuadSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[204/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CTGVSolution.cpp.o
../Common/src/toolboxes/MMS/CTGVSolution.cpp: In member function 'virtual void CTGVSolution::GetSolution(const su2double*, su2double, su2double*) const':
../Common/src/toolboxes/MMS/CTGVSolution.cpp:122:51: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                  tgvDensity*(pow(tgvVelocity,2.0)/16.0)*factorA*factorB);
                                                   ^~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CTGVSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CTGVSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[205/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CMMSNSTwoHalfCirclesSolution.cpp.o
../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp: In member function 'virtual void CMMSNSTwoHalfCirclesSolution::GetMMSSourceTerm(const su2double*, su2double, su2double*) const':
../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:211:37: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t64 = t62 * t34 / 0.4e1;
                                     ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:239:39: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t160 = t158 * t34 / 0.4e1;
                                       ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:249:40: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t191 = 0.1e1 / t35 / 0.4e1;
                                        ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:264:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t261 = t248 * t246 * t34 / 0.4e1 + 0.8e1 * (t25 * t252 + t25 * t254) * rho_0 + t246 * t34 / 0.4e1;
                                              ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:264:111: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t261 = t248 * t246 * t34 / 0.4e1 + 0.8e1 * (t25 * t252 + t25 * t254) * rho_0 + t246 * t34 / 0.4e1;
                                                                                                               ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:294:109: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                         - 0.32e2 / 0.3e1 * x * t11 * t311 * t310 + 0.4e1 * t317 * u_0 * (t248 * t62 * t34 / 0.4e1
                                                                                                             ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:296:69: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                         + 0.4e1 * t317 * v_0 * (t248 * t158 * t34 / 0.4e1
                                                                     ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSTwoHalfCirclesSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[206/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CMMSNSUnitQuadSolution.cpp.o
../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolution.cpp: In member function 'virtual void CMMSNSUnitQuadSolution::GetMMSSourceTerm(const su2double*, su2double, su2double*) const':
../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolution.cpp:294:54: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t243 =  t221 * t239 + t223 * t46 / 0.2e1 + P_0 + t234 + t236 + t238;
                                                      ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSUnitQuadSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolution.cpp:351:61: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t564 = t36 * ( t221 * t219 + t223 * t22 / 0.2e1 + (t171 * t77 + t56 * t36) * t46 - t101 + t108) + t56 * t243
                                                             ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSUnitQuadSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolution.cpp:361:89: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t566 = -t77 * t192 - t171 * t428 + t77 * ( t221 * t430 + t223 * t64 / 0.2e1 + (t143 * t36 + t88 * t77) * t46 + t203 + t205)
                                                                                         ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSUnitQuadSolution.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolution.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[207/451] Compiling C++ object Common/src/libSU2Common.a.p/toolboxes_MMS_CMMSNSUnitQuadSolutionWallBC.cpp.o
../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.cpp: In member function 'virtual void CMMSNSUnitQuadSolutionWallBC::GetMMSSourceTerm(const su2double*, su2double, su2double*) const':
../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.cpp:194:37: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t52 = t50 * t26 / 0.4e1;
                                     ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.cpp:203:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t92 = v_0 * (t57 * t80 * t26 / 0.4e1 + (8 * (t7 * t64 + t7 * t68) * rho_0) + t80 * t26 / 0.4e1);
                                                  ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.cpp:203:108: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t92 = v_0 * (t57 * t80 * t26 / 0.4e1 + (8 * (t7 * t64 + t7 * t68) * rho_0) + t80 * t26 / 0.4e1);
                                                                                                            ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.cpp:207:40: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t111 = 0.1e1 / t27 / 0.4e1;
                                        ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.cpp:213:65: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double t155 = 0.4e1 * t75 * v_0 * (t57 * t50 * t26 / 0.4e1 + (16.0 * (-t2 * t64 - t2 * t68 + t7 * t62 + t7 * t66) * rho_0) + t52)
                                                                 ^~~~~
In file included from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../CConfig.hpp:31,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CVerificationSolution.hpp:32,
                 from ../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.hpp:33,
                 from ../Common/src/toolboxes/MMS/CMMSNSUnitQuadSolutionWallBC.cpp:28:
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/toolboxes/MMS/../../../include/toolboxes/MMS/../../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[208/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/drivers_CDummyDriver.cpp.o
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDummyDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDummyDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDummyDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDummyDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDummyDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDummyDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDummyDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDummyDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDummyDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDummyDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDummyDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDummyDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[209/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/integration_CIntegrationFactory.cpp.o
In file included from ../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/integration/../../include/integration/CSingleGridIntegration.hpp:28,
                 from ../SU2_CFD/src/integration/CIntegrationFactory.cpp:29:
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/option_structure.hpp:30,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/CSolverFactory.hpp:29,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegrationFactory.hpp:29,
                 from ../SU2_CFD/src/integration/CIntegrationFactory.cpp:28:
../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/integration/../../include/integration/CSingleGridIntegration.hpp:28,
                 from ../SU2_CFD/src/integration/CIntegrationFactory.cpp:29:
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/option_structure.hpp:30,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/CSolverFactory.hpp:29,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegrationFactory.hpp:29,
                 from ../SU2_CFD/src/integration/CIntegrationFactory.cpp:28:
../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/integration/../../include/integration/CSingleGridIntegration.hpp:28,
                 from ../SU2_CFD/src/integration/CIntegrationFactory.cpp:29:
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/option_structure.hpp:30,
                 from ../SU2_CFD/src/integration/../../include/integration/../../include/solvers/CSolverFactory.hpp:29,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegrationFactory.hpp:29,
                 from ../SU2_CFD/src/integration/CIntegrationFactory.cpp:28:
../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/integration/../../include/integration/../../include/solvers/../../../Common/include/./parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[210/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_elements_CElement.cpp.o
[211/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_elements_CTRIA1.cpp.o
[212/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/integration_CIntegration.cpp.o
In file included from ../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/integration/CIntegration.cpp:28:
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/integration/CIntegration.cpp:28:
../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/integration/CIntegration.cpp:28:
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/integration/CIntegration.cpp:28:
../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/integration/CIntegration.cpp:28:
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/integration/../../include/integration/../solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/integration/../../include/integration/../solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/integration/../../include/integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/integration/CIntegration.cpp:28:
../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/integration/../../include/integration/../solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[213/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_elements_CQUAD4.cpp.o
[214/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/drivers_CDiscAdjSinglezoneDriver.cpp.o
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDiscAdjSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDiscAdjSinglezoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDiscAdjSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDiscAdjSinglezoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDiscAdjSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDiscAdjSinglezoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDiscAdjSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDiscAdjSinglezoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDiscAdjSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDiscAdjSinglezoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDiscAdjSinglezoneDriver.hpp:30,
                 from ../SU2_CFD/src/drivers/CDiscAdjSinglezoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[215/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_elements_CTETRA1.cpp.o
../Common/src/geometry/elements/CTETRA1.cpp: In member function 'virtual su2double CTETRA1::ComputeVolume(CElement::FrameType) const':
../Common/src/geometry/elements/CTETRA1.cpp:92:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume = fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                      ^~~
In file included from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CGaussVariable.hpp:30,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CElement.hpp:31,
                 from ../Common/src/geometry/elements/CTETRA1.cpp:28:
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[216/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_CDummyGeometry.cpp.o
[217/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_CMultiGridQueue.cpp.o
[218/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_elements_CPRISM6.cpp.o
../Common/src/geometry/elements/CPRISM6.cpp: In member function 'virtual su2double CPRISM6::ComputeVolume(CElement::FrameType) const':
../Common/src/geometry/elements/CPRISM6.cpp:141:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume = fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                      ^~~
In file included from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CGaussVariable.hpp:30,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CElement.hpp:31,
                 from ../Common/src/geometry/elements/CPRISM6.cpp:28:
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/elements/CPRISM6.cpp:153:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CGaussVariable.hpp:30,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CElement.hpp:31,
                 from ../Common/src/geometry/elements/CPRISM6.cpp:28:
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/elements/CPRISM6.cpp:165:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CGaussVariable.hpp:30,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CElement.hpp:31,
                 from ../Common/src/geometry/elements/CPRISM6.cpp:28:
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[219/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_elements_CPYRAM5.cpp.o
../Common/src/geometry/elements/CPYRAM5.cpp: In member function 'virtual su2double CPYRAM5::ComputeVolume(CElement::FrameType) const':
../Common/src/geometry/elements/CPYRAM5.cpp:130:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume = fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                      ^~~
In file included from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CGaussVariable.hpp:30,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CElement.hpp:31,
                 from ../Common/src/geometry/elements/CPYRAM5.cpp:28:
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/elements/CPYRAM5.cpp:142:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CGaussVariable.hpp:30,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CElement.hpp:31,
                 from ../Common/src/geometry/elements/CPYRAM5.cpp:28:
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[220/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_dual_grid_CEdge.cpp.o
../Common/src/geometry/dual_grid/CEdge.cpp: In static member function 'static su2double CEdge::GetVolume(const su2double*, const su2double*, const su2double*, const su2double*)':
../Common/src/geometry/dual_grid/CEdge.cpp:60:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   return fabs(DotProduct(nDim, vec_c, vec_d)) / 6.0;
                                                 ^~~
In file included from ../Common/src/geometry/dual_grid/../../../include/geometry/dual_grid/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/dual_grid/../../../include/geometry/dual_grid/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/dual_grid/../../../include/geometry/dual_grid/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/dual_grid/../../../include/geometry/dual_grid/CEdge.hpp:30,
                 from ../Common/src/geometry/dual_grid/CEdge.cpp:28:
../Common/src/geometry/dual_grid/../../../include/geometry/dual_grid/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/dual_grid/../../../include/geometry/dual_grid/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[221/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_elements_CHEXA8.cpp.o
../Common/src/geometry/elements/CHEXA8.cpp: In member function 'virtual su2double CHEXA8::ComputeVolume(CElement::FrameType) const':
../Common/src/geometry/elements/CHEXA8.cpp:153:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume = fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                      ^~~
In file included from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CGaussVariable.hpp:30,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CElement.hpp:31,
                 from ../Common/src/geometry/elements/CHEXA8.cpp:28:
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/elements/CHEXA8.cpp:165:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CGaussVariable.hpp:30,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CElement.hpp:31,
                 from ../Common/src/geometry/elements/CHEXA8.cpp:28:
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/elements/CHEXA8.cpp:177:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CGaussVariable.hpp:30,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CElement.hpp:31,
                 from ../Common/src/geometry/elements/CHEXA8.cpp:28:
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/elements/CHEXA8.cpp:189:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CGaussVariable.hpp:30,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CElement.hpp:31,
                 from ../Common/src/geometry/elements/CHEXA8.cpp:28:
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/elements/CHEXA8.cpp:201:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/C2DContainer.hpp:31,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CGaussVariable.hpp:30,
                 from ../Common/src/geometry/elements/../../../include/geometry/elements/CElement.hpp:31,
                 from ../Common/src/geometry/elements/CHEXA8.cpp:28:
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/elements/../../../include/geometry/elements/../../containers/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[222/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_dual_grid_CDualGrid.cpp.o
[223/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_CMultiGridGeometry.cpp.o
[224/451] Compiling C++ object externals/tecio/teciompisrc/libteciompi.a.p/TecioSZL.cpp.o
[225/451] Linking static target externals/tecio/teciompisrc/libteciompi.a
[226/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_dual_grid_CVertex.cpp.o
[227/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_primal_grid_CPrimalGrid.cpp.o
[228/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_dual_grid_CTurboVertex.cpp.o
[229/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_dual_grid_CPoint.cpp.o
[230/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_primal_grid_CPrimalGridFEM.cpp.o
[231/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_primal_grid_CLine.cpp.o
[232/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_primal_grid_CTriangle.cpp.o
[233/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_primal_grid_CPrimalGridBoundFEM.cpp.o
[234/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_CGeometry.cpp.o
../Common/src/geometry/CGeometry.cpp: In member function 'void CGeometry::ComputeAirfoil_Section(su2double*, su2double*, su2double, su2double, su2double, su2double, su2double, su2double, const su2double*, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&, bool, CConfig*)':
../Common/src/geometry/CGeometry.cpp:1794:74: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double Tilt_Angle = config->GetNacelleLocation(3)*PI_NUMBER/180;
                                                                          ^~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/CGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CGeometry.cpp:1795:73: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double Toe_Angle = config->GetNacelleLocation(4)*PI_NUMBER/180;
                                                                         ^~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/CGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CGeometry.cpp:2121:72: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         su2double Tilt_Angle = config->GetNacelleLocation(3)*PI_NUMBER/180;
                                                                        ^~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/CGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CGeometry.cpp:2122:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         su2double Toe_Angle = config->GetNacelleLocation(4)*PI_NUMBER/180;
                                                                       ^~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/CGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CGeometry.cpp:2124:68: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         su2double Roll_Angle = 0.5*PI_NUMBER - Theta_deg*PI_NUMBER/180;
                                                                    ^~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/CGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[235/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_primal_grid_CHexahedron.cpp.o
[236/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_primal_grid_CPrism.cpp.o
[237/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_primal_grid_CPyramid.cpp.o
[238/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_primal_grid_CTetrahedron.cpp.o
[239/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_primal_grid_CQuadrilateral.cpp.o
[240/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_primal_grid_CVertexMPI.cpp.o
[241/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_meshreader_CMeshReaderFVM.cpp.o
[242/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_meshreader_CBoxMeshReaderFVM.cpp.o
[243/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_meshreader_CRectangularMeshReaderFVM.cpp.o
[244/451] Compiling C++ object Common/src/libSU2Common.a.p/interface_interpolation_CInterpolatorFactory.cpp.o
[245/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_meshreader_CCGNSMeshReaderFVM.cpp.o
[246/451] Compiling C++ object Common/src/libSU2Common.a.p/interface_interpolation_CInterpolator.cpp.o
[247/451] Compiling C++ object Common/src/libSU2Common.a.p/interface_interpolation_CMirror.cpp.o
[248/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_meshreader_CSU2ASCIIMeshReaderFVM.cpp.o
[249/451] Compiling C++ object Common/src/libSU2Common.a.p/interface_interpolation_CNearestNeighbor.cpp.o
[250/451] Compiling C++ object Common/src/libSU2Common.a.p/interface_interpolation_CSlidingMesh.cpp.o
../Common/src/interface_interpolation/CSlidingMesh.cpp: In member function 'virtual void CSlidingMesh::SetTransferCoeff(const CConfig* const*)':
../Common/src/interface_interpolation/CSlidingMesh.cpp:249:105: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                                             target_geometry->nodes->GetCoord( target_iPoint , iDim) ) / 2.;
                                                                                                         ^~
In file included from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../code_config.hpp:101:0,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/datatype_structure.hpp:34,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CInterpolator.hpp:29,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CSlidingMesh.hpp:29,
                 from ../Common/src/interface_interpolation/CSlidingMesh.cpp:28:
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/interface_interpolation/CSlidingMesh.cpp:251:105: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                                             target_geometry->nodes->GetCoord( target_iPoint , iDim) ) / 2.;
                                                                                                         ^~
In file included from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../code_config.hpp:101:0,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/datatype_structure.hpp:34,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CInterpolator.hpp:29,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CSlidingMesh.hpp:29,
                 from ../Common/src/interface_interpolation/CSlidingMesh.cpp:28:
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/interface_interpolation/CSlidingMesh.cpp:295:87: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                                              DonorPoint_Coord(donor_iPoint, iDim) ) / 2.;
                                                                                       ^~
In file included from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../code_config.hpp:101:0,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/datatype_structure.hpp:34,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CInterpolator.hpp:29,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CSlidingMesh.hpp:29,
                 from ../Common/src/interface_interpolation/CSlidingMesh.cpp:28:
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/interface_interpolation/CSlidingMesh.cpp:297:87: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                                              DonorPoint_Coord(donor_iPoint, iDim) ) / 2.;
                                                                                       ^~
In file included from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../code_config.hpp:101:0,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/datatype_structure.hpp:34,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CInterpolator.hpp:29,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CSlidingMesh.hpp:29,
                 from ../Common/src/interface_interpolation/CSlidingMesh.cpp:28:
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/interface_interpolation/CSlidingMesh.cpp:378:87: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                                              DonorPoint_Coord(donor_iPoint, iDim) ) / 2.;
                                                                                       ^~
In file included from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../code_config.hpp:101:0,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/datatype_structure.hpp:34,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CInterpolator.hpp:29,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CSlidingMesh.hpp:29,
                 from ../Common/src/interface_interpolation/CSlidingMesh.cpp:28:
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/interface_interpolation/CSlidingMesh.cpp:380:87: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                                              DonorPoint_Coord(donor_iPoint, iDim) ) / 2.;
                                                                                       ^~
In file included from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../code_config.hpp:101:0,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/datatype_structure.hpp:34,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CInterpolator.hpp:29,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CSlidingMesh.hpp:29,
                 from ../Common/src/interface_interpolation/CSlidingMesh.cpp:28:
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/interface_interpolation/CSlidingMesh.cpp: In static member function 'static int CSlidingMesh::Build_3D_surface_element(su2vector<long unsigned int>&, su2vector<long unsigned int>&, su2vector<long unsigned int>&, const su2activematrix&, long unsigned int, su2double**)':
../Common/src/interface_interpolation/CSlidingMesh.cpp:777:101: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       element[ iElementNode ][iDim] = ( element[0][iDim] + coord(OuterNodes[ CurrentNode ], iDim) )/2.;
                                                                                                     ^~
In file included from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../code_config.hpp:101:0,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/datatype_structure.hpp:34,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CInterpolator.hpp:29,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CSlidingMesh.hpp:29,
                 from ../Common/src/interface_interpolation/CSlidingMesh.cpp:28:
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/interface_interpolation/CSlidingMesh.cpp:783:79: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                                         coord(OuterNodes[ NextNode ], iDim) )/3.;
                                                                               ^~
In file included from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../code_config.hpp:101:0,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/datatype_structure.hpp:34,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CInterpolator.hpp:29,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CSlidingMesh.hpp:29,
                 from ../Common/src/interface_interpolation/CSlidingMesh.cpp:28:
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/interface_interpolation/CSlidingMesh.cpp:806:101: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       element[ iElementNode ][iDim] = ( element[0][iDim] + coord(OuterNodes[ CurrentNode ], iDim) )/2.;
                                                                                                     ^~
In file included from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../code_config.hpp:101:0,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/datatype_structure.hpp:34,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CInterpolator.hpp:29,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CSlidingMesh.hpp:29,
                 from ../Common/src/interface_interpolation/CSlidingMesh.cpp:28:
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/interface_interpolation/CSlidingMesh.cpp: In static member function 'static su2double CSlidingMesh::ComputeIntersectionArea(const su2double*, const su2double*, const su2double*, const su2double*, const su2double*, const su2double*)':
../Common/src/interface_interpolation/CSlidingMesh.cpp:1108:21: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   return fabs(Area)/2;
                     ^
In file included from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../code_config.hpp:101:0,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/datatype_structure.hpp:34,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CInterpolator.hpp:29,
                 from ../Common/src/interface_interpolation/../../include/interface_interpolation/CSlidingMesh.hpp:29,
                 from ../Common/src/interface_interpolation/CSlidingMesh.cpp:28:
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/interface_interpolation/../../include/interface_interpolation/../../include/basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[251/451] Compiling C++ object Common/src/libSU2Common.a.p/interface_interpolation_CIsoparametric.cpp.o
[252/451] Compiling C++ object Common/src/libSU2Common.a.p/grid_movement_CFreeFormBlending.cpp.o
[253/451] Compiling C++ object Common/src/libSU2Common.a.p/fem_fem_work_estimate_metis.cpp.o
[254/451] Compiling C++ object Common/src/libSU2Common.a.p/interface_interpolation_CRadialBasisFunction.cpp.o
[255/451] Compiling C++ object Common/src/libSU2Common.a.p/grid_movement_CBSplineBlending.cpp.o
[256/451] Compiling C++ object Common/src/libSU2Common.a.p/grid_movement_CBezierBlending.cpp.o
../Common/src/grid_movement/CBezierBlending.cpp: In member function 'su2double CBezierBlending::GetBernstein(short int, short int, su2double)':
../Common/src/grid_movement/CBezierBlending.cpp:57:59: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     else value = Binomial(val_n, val_i) * pow(val_t, val_i) * pow(1.0 - val_t, val_n - val_i);
                                                           ^
In file included from ../Common/src/grid_movement/../../include/grid_movement/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/CFreeFormBlending.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/CBezierBlending.hpp:31,
                 from ../Common/src/grid_movement/CBezierBlending.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/CFreeFormBlending.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/CBezierBlending.hpp:31,
                 from ../Common/src/grid_movement/CBezierBlending.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../Common/src/grid_movement/CBezierBlending.cpp:62:34: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     else value = pow(val_t, val_n);
                                  ^
In file included from ../Common/src/grid_movement/../../include/grid_movement/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/CFreeFormBlending.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/CBezierBlending.hpp:31,
                 from ../Common/src/grid_movement/CBezierBlending.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/CFreeFormBlending.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/CBezierBlending.hpp:31,
                 from ../Common/src/grid_movement/CBezierBlending.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../Common/src/grid_movement/CBezierBlending.cpp:66:54: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     value = Binomial(val_n, val_i) * pow(val_t, val_i) * pow(1.0-val_t, val_n - val_i);
                                                      ^
In file included from ../Common/src/grid_movement/../../include/grid_movement/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/CFreeFormBlending.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/CBezierBlending.hpp:31,
                 from ../Common/src/grid_movement/CBezierBlending.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/CFreeFormBlending.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/CBezierBlending.hpp:31,
                 from ../Common/src/grid_movement/CBezierBlending.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
[257/451] Compiling C++ object Common/src/libSU2Common.a.p/fem_fem_gauss_jacobi_quadrature.cpp.o
[258/451] Compiling C++ object Common/src/libSU2Common.a.p/adt_CADTBaseClass.cpp.o
[259/451] Compiling C++ object Common/src/libSU2Common.a.p/grid_movement_CGridMovement.cpp.o
[260/451] Compiling C++ object Common/src/libSU2Common.a.p/fem_fem_wall_distance.cpp.o
[261/451] Compiling C++ object Common/src/libSU2Common.a.p/geometry_CPhysicalGeometry.cpp.o
../Common/src/geometry/CPhysicalGeometry.cpp: In constructor 'CPhysicalGeometry::CPhysicalGeometry(CConfig*, short unsigned int, short unsigned int)':
../Common/src/geometry/CPhysicalGeometry.cpp:122:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           nodes->SetCoord(iPoint, iDim, nodes->GetCoord(iPoint, iDim)/12.0);
                                                                       ^~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp: In member function 'virtual void CPhysicalGeometry::ComputeNSpan(CConfig*, short unsigned int, short unsigned int, bool)':
../Common/src/geometry/CPhysicalGeometry.cpp:5276:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       delta = (max - min)/(nSpanWiseSections[marker_flag-1] -1);
                                                               ^
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp: In member function 'virtual void CPhysicalGeometry::SetAvgTurboValue(CConfig*, short unsigned int, short unsigned int, bool)':
../Common/src/geometry/CPhysicalGeometry.cpp:6372:156: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
             AverageTangGridVel[iMarker][nSpanWiseSections[marker_flag-1]]             += AverageTangGridVel[iMarker][iSpan]/nSpanWiseSections[marker_flag-1];
                                                                                                                                                            ^
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp:6377:158: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
               AverageGridVel[iMarker][nSpanWiseSections[marker_flag-1]][iDim]         += AverageGridVel[iMarker][iSpan][iDim]/nSpanWiseSections[marker_flag-1];
                                                                                                                                                              ^
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp: In member function 'virtual void CPhysicalGeometry::GatherInOutAverageValues(CConfig*, bool)':
../Common/src/geometry/CPhysicalGeometry.cpp:6582:21: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     Pitch +=pitchIn/nSpanWiseSections;
                     ^~~~~~~~~~~~~~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp: In member function 'virtual su2double CPhysicalGeometry::Compute_MaxThickness(su2double*, su2double*, CConfig*, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&)':
../Common/src/geometry/CPhysicalGeometry.cpp:9331:30: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   ValCos = cos(AoA*PI_NUMBER/180.0);
                              ^~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp:9332:30: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   ValSin = sin(AoA*PI_NUMBER/180.0);
                              ^~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp: In member function 'virtual su2double CPhysicalGeometry::Compute_Thickness(su2double*, su2double*, su2double, CConfig*, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&, su2double&)':
../Common/src/geometry/CPhysicalGeometry.cpp:9699:30: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   ValCos = cos(AoA*PI_NUMBER/180.0);
                              ^~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp:9700:30: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   ValSin = sin(AoA*PI_NUMBER/180.0);
                              ^~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp:9793:31: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     ZLoc = sin(-AoA*PI_NUMBER/180.0)*YLoc_ + cos(-AoA*PI_NUMBER/180.0)*ZLoc_ + Zcoord_Trailing;
                               ^~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp:9793:65: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     ZLoc = sin(-AoA*PI_NUMBER/180.0)*YLoc_ + cos(-AoA*PI_NUMBER/180.0)*ZLoc_ + Zcoord_Trailing;
                                                                 ^~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp: In member function 'virtual void CPhysicalGeometry::Compute_Wing(CConfig*, bool, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&)':
../Common/src/geometry/CPhysicalGeometry.cpp:10092:58: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double ValCos = cos(Twist[iPlane]*PI_NUMBER/180.0);
                                                          ^~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp:10093:58: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double ValSin = sin(Twist[iPlane]*PI_NUMBER/180.0);
                                                          ^~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp: In member function 'virtual void CPhysicalGeometry::Compute_Nacelle(CConfig*, bool, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&, su2double&)':
../Common/src/geometry/CPhysicalGeometry.cpp:10503:48: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     Angle = MinAngle + iPlane*dAngle*PI_NUMBER/180.0;
                                                ^~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp:10514:68: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double Tilt_Angle = config->GetNacelleLocation(3)*PI_NUMBER/180;
                                                                    ^~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp:10521:67: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double Toe_Angle = config->GetNacelleLocation(4)*PI_NUMBER/180;
                                                                   ^~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp:10657:47: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         su2double Angle = theta_deg*PI_NUMBER/180 - 0.5*PI_NUMBER;
                                               ^~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp:10670:58: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double ValCos = cos(Twist[iPlane]*PI_NUMBER/180.0);
                                                          ^~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/geometry/CPhysicalGeometry.cpp:10671:58: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double ValSin = sin(Twist[iPlane]*PI_NUMBER/180.0);
                                                          ^~~~~
In file included from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/geometry/../../include/geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/geometry/../../include/geometry/CGeometry.hpp:31,
                 from ../Common/src/geometry/../../include/geometry/CPhysicalGeometry.hpp:30,
                 from ../Common/src/geometry/CPhysicalGeometry.cpp:28:
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/geometry/../../include/geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[262/451] Compiling C++ object Common/src/libSU2Common.a.p/adt_CADTPointsOnlyClass.cpp.o
[263/451] Compiling C++ object Common/src/libSU2Common.a.p/fem_fem_standard_element.cpp.o
../Common/src/fem/fem_standard_element.cpp: In member function 'void CFEMStandardElementBase::LagrangianBasisFunctionAndDerivativesPyramid(short unsigned int, const std::vector<cplx>&, const std::vector<cplx>&, const std::vector<cplx>&, short unsigned int&, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&)':
../Common/src/fem/fem_standard_element.cpp:797:42: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double dh = mPoly ? (rsMax-rsMin)/mPoly : su2double(0.0);
                                          ^~~~~
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
../Common/src/fem/../../include/fem/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/fem/../../include/fem/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/fem/fem_standard_element.cpp: In member function 'void CFEMStandardElementBase::Vandermonde2D_Triangle(short unsigned int, short unsigned int, const std::vector<cplx>&, const std::vector<cplx>&, std::vector<cplx>&)':
../Common/src/fem/fem_standard_element.cpp:1152:36: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         if( i ) tmp = pow((1.0-b),i);
                                    ^
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
../Common/src/fem/../../include/fem/../parallelization/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../Common/src/fem/fem_standard_element.cpp: In member function 'void CFEMStandardElementBase::GradVandermonde2D_Triangle(short unsigned int, short unsigned int, const std::vector<cplx>&, const std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&)':
../Common/src/fem/fem_standard_element.cpp:1211:37: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         if( i ) tmp = pow((1.0-b), i);
                                     ^
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
../Common/src/fem/../../include/fem/../parallelization/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../Common/src/fem/fem_standard_element.cpp: In member function 'void CFEMStandardElementBase::Vandermonde3D_Tetrahedron(short unsigned int, short unsigned int, const std::vector<cplx>&, const std::vector<cplx>&, const std::vector<cplx>&, std::vector<cplx>&)':
../Common/src/fem/fem_standard_element.cpp:1310:41: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           if( i )   tmpb = pow((1.0-b),i);
                                         ^
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
../Common/src/fem/../../include/fem/../parallelization/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../Common/src/fem/fem_standard_element.cpp: In member function 'void CFEMStandardElementBase::GradVandermonde3D_Tetrahedron(short unsigned int, short unsigned int, const std::vector<cplx>&, const std::vector<cplx>&, const std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&)':
../Common/src/fem/fem_standard_element.cpp:1390:44: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           if( i ) VDs[ii] *= pow((1.0-b), i);
                                            ^
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
../Common/src/fem/../../include/fem/../parallelization/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../Common/src/fem/fem_standard_element.cpp:1425:43: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           if( i) VDt[ii] *= pow((1.0-b), i);
                                           ^
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
../Common/src/fem/../../include/fem/../parallelization/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../Common/src/fem/fem_standard_element.cpp: In member function 'void CFEMStandardElementBase::Vandermonde3D_Pyramid(short unsigned int, short unsigned int, const std::vector<cplx>&, const std::vector<cplx>&, const std::vector<cplx>&, std::vector<cplx>&)':
../Common/src/fem/fem_standard_element.cpp:1478:41: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           if( muij ) tmpt = pow(tmp,muij);
                                         ^
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
../Common/src/fem/../../include/fem/../parallelization/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../Common/src/fem/fem_standard_element.cpp: In member function 'void CFEMStandardElementBase::GradVandermonde3D_Pyramid(short unsigned int, short unsigned int, const std::vector<cplx>&, const std::vector<cplx>&, const std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&)':
../Common/src/fem/fem_standard_element.cpp:1562:48: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           if(muij > 0) VDt[ii] *= pow(tmp, muij);
                                                ^
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
../Common/src/fem/../../include/fem/../parallelization/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../Common/src/fem/fem_standard_element.cpp: In member function 'void CFEMStandardElementBase::Vandermonde3D_Prism(short unsigned int, short unsigned int, const std::vector<cplx>&, const std::vector<cplx>&, const std::vector<cplx>&, std::vector<cplx>&)':
../Common/src/fem/fem_standard_element.cpp:1624:38: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           if( i ) tmp = pow((1.0-b),i);
                                      ^
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
../Common/src/fem/../../include/fem/../parallelization/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../Common/src/fem/fem_standard_element.cpp: In member function 'void CFEMStandardElementBase::GradVandermonde3D_Prism(short unsigned int, short unsigned int, const std::vector<cplx>&, const std::vector<cplx>&, const std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&, std::vector<cplx>&)':
../Common/src/fem/fem_standard_element.cpp:1692:41: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           if(i > 0) tmp = pow((1.0-b), i);
                                         ^
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
../Common/src/fem/../../include/fem/../parallelization/../basic_types/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../Common/src/fem/../../include/fem/../parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../Common/src/fem/../../include/fem/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/fem/../../include/fem/../CConfig.hpp:31,
                 from ../Common/src/fem/../../include/fem/fem_standard_element.hpp:35,
                 from ../Common/src/fem/fem_standard_element.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
[264/451] Compiling C++ object Common/src/libSU2Common.a.p/grid_movement_CFreeFormDefBox.cpp.o
[265/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/definition_structure.cpp.o
[266/451] Compiling C++ object Common/src/libSU2Common.a.p/fem_fem_integration_rules.cpp.o
[267/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/fluid_CMutationTCLib.cpp.o
[268/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/CMarkerProfileReaderFVM.cpp.o
[269/451] Compiling C++ object Common/src/libSU2Common.a.p/grid_movement_CVolumetricMovement.cpp.o
../Common/src/grid_movement/CVolumetricMovement.cpp: In member function 'su2double CVolumetricMovement::GetTetra_Volume(su2double (*)[3]) const':
../Common/src/grid_movement/CVolumetricMovement.cpp:1071:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume = fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                      ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CVolumetricMovement.cpp: In member function 'su2double CVolumetricMovement::GetPyram_Volume(su2double (*)[3]) const':
../Common/src/grid_movement/CVolumetricMovement.cpp:1098:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume = fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                      ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CVolumetricMovement.cpp:1115:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CVolumetricMovement.cpp: In member function 'su2double CVolumetricMovement::GetPrism_Volume(su2double (*)[3]) const':
../Common/src/grid_movement/CVolumetricMovement.cpp:1142:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume = fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                      ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CVolumetricMovement.cpp:1159:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CVolumetricMovement.cpp:1176:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CVolumetricMovement.cpp: In member function 'su2double CVolumetricMovement::GetHexa_Volume(su2double (*)[3]) const':
../Common/src/grid_movement/CVolumetricMovement.cpp:1203:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume = fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                      ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CVolumetricMovement.cpp:1220:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CVolumetricMovement.cpp:1237:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CVolumetricMovement.cpp:1254:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CVolumetricMovement.cpp:1271:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Volume += fabs(CrossProduct[0] + CrossProduct[1] + CrossProduct[2])/6.0;
                                                                       ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CVolumetricMovement.cpp: In member function 'void CVolumetricMovement::SetVolume_Rotation(CGeometry*, CConfig*, bool)':
../Common/src/grid_movement/CVolumetricMovement.cpp:2469:60: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double theta = config->GetDV_Value(0)*Scale*PI_NUMBER/180.0;
                                                            ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CVolumetricMovement.hpp:30,
                 from ../Common/src/grid_movement/CVolumetricMovement.cpp:29:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[270/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/fluid_CIdealGas.cpp.o
[271/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/fluid_CFluidModel.cpp.o
[272/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/python_wrapper_structure.cpp.o
In file included from ../SU2_CFD/src/../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/python_wrapper_structure.cpp:29:
../SU2_CFD/src/../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/../include/drivers/../integration/../solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/python_wrapper_structure.cpp:29:
../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/python_wrapper_structure.cpp:29:
../SU2_CFD/src/../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/../include/drivers/../integration/../solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/python_wrapper_structure.cpp:29:
../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/python_wrapper_structure.cpp:29:
../SU2_CFD/src/../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/../include/drivers/../integration/../solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/python_wrapper_structure.cpp:29:
../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/python_wrapper_structure.cpp: In member function 'void CDriver::SetInlet_Angle(short unsigned int, passivedouble)':
../SU2_CFD/src/python_wrapper_structure.cpp:568:43: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double alpha_rad = alpha * PI_NUMBER/180.0;
                                           ^~~~~
In file included from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/python_wrapper_structure.cpp:29:
../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[273/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/fluid_CVanDerWaalsGas.cpp.o
../SU2_CFD/src/fluid/CVanDerWaalsGas.cpp: In member function 'virtual void CVanDerWaalsGas::SetTDState_hs(su2double, su2double)':
../SU2_CFD/src/fluid/CVanDerWaalsGas.cpp:135:28: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     xmid = rtb + (dx *= 0.5);
                            ^
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CVanDerWaalsGas.hpp:30,
                 from ../SU2_CFD/src/fluid/CVanDerWaalsGas.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:326:5: note: candidate 1: std::complex<_Tp> std::operator+(const std::complex<_Tp>&, const std::complex<_Tp>&) [with _Tp = double]
     operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
     ^~~~~~~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CVanDerWaalsGas.hpp:30,
                 from ../SU2_CFD/src/fluid/CVanDerWaalsGas.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:229:13: note: candidate 2: cplx cplx::operator+(const cplx&) const
 inline cplx cplx::operator+(const cplx& z) const
             ^~~~
../SU2_CFD/src/fluid/CVanDerWaalsGas.cpp: In member function 'virtual void CVanDerWaalsGas::SetTDState_Ps(su2double, su2double)':
../SU2_CFD/src/fluid/CVanDerWaalsGas.cpp:184:16: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     x2 = rho / 0.5;
                ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CVanDerWaalsGas.hpp:30,
                 from ../SU2_CFD/src/fluid/CVanDerWaalsGas.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CVanDerWaalsGas.cpp:215:28: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     xmid = rtb + (dx *= 0.5);
                            ^
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CVanDerWaalsGas.hpp:30,
                 from ../SU2_CFD/src/fluid/CVanDerWaalsGas.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:326:5: note: candidate 1: std::complex<_Tp> std::operator+(const std::complex<_Tp>&, const std::complex<_Tp>&) [with _Tp = double]
     operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
     ^~~~~~~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CVanDerWaalsGas.hpp:30,
                 from ../SU2_CFD/src/fluid/CVanDerWaalsGas.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:229:13: note: candidate 2: cplx cplx::operator+(const cplx&) const
 inline cplx cplx::operator+(const cplx& z) const
             ^~~~
[274/451] Compiling C++ object Common/src/libSU2Common.a.p/adt_CADTElemClass.cpp.o
[275/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/fluid_CPengRobinson.cpp.o
../SU2_CFD/src/fluid/CPengRobinson.cpp: In member function 'su2double CPengRobinson::T_v_h(su2double, su2double)':
../SU2_CFD/src/fluid/CPengRobinson.cpp:53:83: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   atanh = (log(1.0 + (b * sqrt2 / (v + b))) - log(1.0 - (b * sqrt2 / (v + b)))) / 2.0;
                                                                                   ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp: In member function 'virtual void CPengRobinson::SetTDState_rhoe(su2double, su2double)':
../SU2_CFD/src/fluid/CPengRobinson.cpp:96:107: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   atanh = (log(1.0 + (rho * b * sqrt2 / (1 + rho * b))) - log(1.0 - (rho * b * sqrt2 / (1 + rho * b)))) / 2.0;
                                                                                                           ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp: In member function 'virtual void CPengRobinson::SetTDState_PT(su2double, su2double)':
../SU2_CFD/src/fluid/CPengRobinson.cpp:181:107: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   atanh = (log(1.0 + (rho * b * sqrt2 / (1 + rho * b))) - log(1.0 - (rho * b * sqrt2 / (1 + rho * b)))) / 2.0;
                                                                                                           ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp: In member function 'virtual void CPengRobinson::SetTDState_hs(su2double, su2double)':
../SU2_CFD/src/fluid/CPengRobinson.cpp:217:85: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   atanh = (log(1.0 + (b * sqrt2 / (x1 + b))) - log(1.0 - (b * sqrt2 / (x1 + b)))) / 2.0;
                                                                                     ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp:223:85: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   atanh = (log(1.0 + (b * sqrt2 / (x2 + b))) - log(1.0 - (b * sqrt2 / (x2 + b)))) / 2.0;
                                                                                     ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp:235:91: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         atanh = (log(1.0 + (b * sqrt2 / (x1 + b))) - log(1.0 - (b * sqrt2 / (x1 + b)))) / 2.0;
                                                                                           ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp:242:91: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         atanh = (log(1.0 + (b * sqrt2 / (x2 + b))) - log(1.0 - (b * sqrt2 / (x2 + b)))) / 2.0;
                                                                                           ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp:260:28: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     xmid = rtb + (dx *= 0.5);
                            ^
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:326:5: note: candidate 1: std::complex<_Tp> std::operator+(const std::complex<_Tp>&, const std::complex<_Tp>&) [with _Tp = double]
     operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
     ^~~~~~~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:229:13: note: candidate 2: cplx cplx::operator+(const cplx&) const
 inline cplx cplx::operator+(const cplx& z) const
             ^~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp:262:91: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     atanh = (log(1.0 + (b * sqrt2 / (xmid + b))) - log(1.0 - (b * sqrt2 / (xmid + b)))) / 2.0;
                                                                                           ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp: In member function 'virtual void CPengRobinson::SetEnergy_Prho(su2double, su2double)':
../SU2_CFD/src/fluid/CPengRobinson.cpp:313:115: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   atanh = (log(1.0 + (rho * b * sqrt(2.0) / (1 + rho * b))) - log(1.0 - (rho * b * sqrt(2.0) / (1 + rho * b)))) / 2.0;
                                                                                                                   ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp: In member function 'virtual void CPengRobinson::SetTDState_rhoT(su2double, su2double)':
../SU2_CFD/src/fluid/CPengRobinson.cpp:325:115: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   atanh = (log(1.0 + (rho * b * sqrt(2.0) / (1 + rho * b))) - log(1.0 - (rho * b * sqrt(2.0) / (1 + rho * b)))) / 2.0;
                                                                                                                   ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp: In member function 'virtual void CPengRobinson::SetTDState_Ps(su2double, su2double)':
../SU2_CFD/src/fluid/CPengRobinson.cpp:351:85: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   atanh = (log(1.0 + (b * sqrt2 / (x1 + b))) - log(1.0 - (b * sqrt2 / (x1 + b)))) / 2.0;
                                                                                     ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp:357:85: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   atanh = (log(1.0 + (b * sqrt2 / (x2 + b))) - log(1.0 - (b * sqrt2 / (x2 + b)))) / 2.0;
                                                                                     ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp:370:91: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         atanh = (log(1.0 + (b * sqrt2 / (x1 + b))) - log(1.0 - (b * sqrt2 / (x1 + b)))) / 2.0;
                                                                                           ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp:378:91: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         atanh = (log(1.0 + (b * sqrt2 / (x2 + b))) - log(1.0 - (b * sqrt2 / (x2 + b)))) / 2.0;
                                                                                           ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp:397:28: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     xmid = rtb + (dx *= 0.5);
                            ^
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:31:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:326:5: note: candidate 1: std::complex<_Tp> std::operator+(const std::complex<_Tp>&, const std::complex<_Tp>&) [with _Tp = double]
     operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
     ^~~~~~~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:229:13: note: candidate 2: cplx cplx::operator+(const cplx&) const
 inline cplx cplx::operator+(const cplx& z) const
             ^~~~
../SU2_CFD/src/fluid/CPengRobinson.cpp:400:91: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     atanh = (log(1.0 + (b * sqrt2 / (xmid + b))) - log(1.0 - (b * sqrt2 / (xmid + b)))) / 2.0;
                                                                                           ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CIdealGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CPengRobinson.hpp:30,
                 from ../SU2_CFD/src/fluid/CPengRobinson.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[276/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/fluid_CNEMOGas.cpp.o
[277/451] Compiling C++ object Common/src/libSU2Common.a.p/fem_geometry_structure_fem_part.cpp.o
[278/451] Compiling C++ object Common/src/libSU2Common.a.p/grid_movement_CSurfaceMovement.cpp.o
../Common/src/grid_movement/CSurfaceMovement.cpp: In member function 'virtual std::vector<std::vector<cplx> > CSurfaceMovement::SetSurface_Deformation(CGeometry*, CConfig*)':
../Common/src/grid_movement/CSurfaceMovement.cpp:365:67: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                     config->SetDV_Value(iDV, iDV_Value, -dv_value/2);
                                                                   ^
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:366:66: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                     totaldeformation[iDV][iDV_Value] -= dv_value/2;
                                                                  ^
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:414:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                     DeformationDifference = abs(DeformationDifference/2.0);
                                                                       ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:429:72: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                     DeformationDifference = -abs(DeformationDifference/2.0);
                                                                        ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:447:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                         config->SetDV_Value(iDV, iDV_Value, dv_value/2.0);
                                                                      ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:448:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                         totaldeformation[iDV][iDV_Value] += dv_value/2.0;
                                                                      ^~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp: In member function 'bool CSurfaceMovement::SetFFDRotation(CGeometry*, CConfig*, CFreeFormDefBox*, CFreeFormDefBox**, short unsigned int, bool) const':
../Common/src/grid_movement/CSurfaceMovement.cpp:2513:64: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double theta = config->GetDV_Value(iDV)*Scale*PI_NUMBER/180.0;
                                                                ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp: In member function 'bool CSurfaceMovement::SetFFDControl_Surface(CGeometry*, CConfig*, CFreeFormDefBox*, CFreeFormDefBox**, short unsigned int, bool) const':
../Common/src/grid_movement/CSurfaceMovement.cpp:2591:65: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double theta = -config->GetDV_Value(iDV)*Scale*PI_NUMBER/180.0;
                                                                 ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp: In member function 'void CSurfaceMovement::SetHicksHenne(CGeometry*, CConfig*, short unsigned int, bool)':
../Common/src/grid_movement/CSurfaceMovement.cpp:2758:36: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         ValCos = cos(AoA*PI_NUMBER/180.0);
                                    ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:2759:36: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         ValSin = sin(AoA*PI_NUMBER/180.0);
                                    ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:2783:35: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       ValCos = cos(-AoA*PI_NUMBER/180.0);
                                   ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:2784:35: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       ValSin = sin(-AoA*PI_NUMBER/180.0);
                                   ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp: In member function 'void CSurfaceMovement::SetCST(CGeometry*, CConfig*, short unsigned int, bool)':
../Common/src/grid_movement/CSurfaceMovement.cpp:2970:36: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         ValCos = cos(AoA*PI_NUMBER/180.0);
                                    ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:2971:36: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         ValSin = sin(AoA*PI_NUMBER/180.0);
                                    ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:3012:35: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       ValCos = cos(-AoA*PI_NUMBER/180.0);
                                   ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:3013:35: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       ValSin = sin(-AoA*PI_NUMBER/180.0);
                                   ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp: In member function 'void CSurfaceMovement::SetRotation(CGeometry*, CConfig*, short unsigned int, bool)':
../Common/src/grid_movement/CSurfaceMovement.cpp:3056:62: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double theta = config->GetDV_Value(iDV)*Scale*PI_NUMBER/180.0;
                                                              ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp: In member function 'void CSurfaceMovement::SetBoundary_Flutter3D(CGeometry*, CConfig*, CFreeFormDefBox**, long unsigned int, short unsigned int)':
../Common/src/grid_movement/CSurfaceMovement.cpp:3290:61: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   alpha     = (1E-10 + (alpha_new - alpha_old))*(-PI_NUMBER/180.0);
                                                             ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp: In member function 'void CSurfaceMovement::SetNACA_4Digits(CGeometry*, CConfig*)':
../Common/src/grid_movement/CSurfaceMovement.cpp:3548:44: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Ya = config->GetParamDV(0,0) / 100.0; /*--- Maximum camber as a fraction of the chord
                                            ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:3550:44: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Xa = config->GetParamDV(0,1) / 10.0; /*--- Location of maximum camber as a fraction of
                                            ^~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp:3552:43: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double t = config->GetParamDV(0,2) / 100.0; /*--- Maximum thickness as a fraction of the
                                           ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/CSurfaceMovement.cpp: In member function 'void CSurfaceMovement::SetParabolic(CGeometry*, CConfig*)':
../Common/src/grid_movement/CSurfaceMovement.cpp:3585:43: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double t = config->GetParamDV(0,1) / 100.0; /*--- Thickness of the parabola ---*/
                                           ^~~~~
In file included from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/mpi_structure.hpp:37,
                 from ../Common/src/grid_movement/../../include/grid_movement/../geometry/CGeometry.hpp:31,
                 from ../Common/src/grid_movement/../../include/grid_movement/CGridMovement.hpp:30,
                 from ../Common/src/grid_movement/../../include/grid_movement/CSurfaceMovement.hpp:30,
                 from ../Common/src/grid_movement/CSurfaceMovement.cpp:28:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h: At global scope:
../Common/src/grid_movement/../../include/grid_movement/../geometry/../parallelization/../basic_types/../complexify.h:90:15: warning: inline function 'cplx cplx::operator*(const long unsigned int&) const' used but never defined
   inline cplx operator*(const long unsigned int&) const; // BJB
               ^~~~~~~~
[279/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_COutputFactory.cpp.o
[280/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CAdjHeatOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjHeatOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjHeatOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjHeatOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjHeatOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjHeatOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjHeatOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjHeatOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjHeatOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjHeatOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[281/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/fluid_CSU2TCLib.cpp.o
../SU2_CFD/src/fluid/CSU2TCLib.cpp: In member function 'virtual std::vector<cplx>& CSU2TCLib::GetSpeciesCvTraRot()':
../SU2_CFD/src/fluid/CSU2TCLib.cpp:636:58: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     Cvtrs[iSpecies] = (3.0/2.0 + RotationModes[iSpecies]/2.0) * Ru/MolarMass[iSpecies];
                                                          ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CNEMOGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CSU2TCLib.hpp:30,
                 from ../SU2_CFD/src/fluid/CSU2TCLib.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CSU2TCLib.cpp: In member function 'virtual std::vector<cplx>& CSU2TCLib::ComputeMixtureEnergies()':
../SU2_CFD/src/fluid/CSU2TCLib.cpp:722:67: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     rhoEmix += rhos[iSpecies] * ((3.0/2.0+RotationModes[iSpecies]/2.0) * Ru/MolarMass[iSpecies] * (T-Ref_Temperature[iSpecies]) + Ev + Ee + Ef);
                                                                   ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CNEMOGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CSU2TCLib.hpp:30,
                 from ../SU2_CFD/src/fluid/CSU2TCLib.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CSU2TCLib.cpp: In member function 'virtual std::vector<cplx>& CSU2TCLib::ComputeNetProductionRates()':
../SU2_CFD/src/fluid/CSU2TCLib.cpp:820:27: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     Keq = exp(  A[0]*(Thb/1E4) + A[1] + A[2]*log(1E4/Thb)
                           ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CNEMOGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CSU2TCLib.hpp:30,
                 from ../SU2_CFD/src/fluid/CSU2TCLib.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CSU2TCLib.cpp: In member function 'void CSU2TCLib::ThermalConductivitiesWBE()':
../SU2_CFD/src/fluid/CSU2TCLib.cpp:1139:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     ks[iSpecies] = mus[iSpecies]*(15.0/4.0 + RotationModes[iSpecies]/2.0)*Ru/MolarMass[iSpecies];
                                                                      ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CNEMOGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CSU2TCLib.hpp:30,
                 from ../SU2_CFD/src/fluid/CSU2TCLib.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/fluid/CSU2TCLib.cpp: In member function 'virtual std::vector<cplx>& CSU2TCLib::ComputeTemperatures(std::vector<cplx>&, su2double, su2double, su2double)':
../SU2_CFD/src/fluid/CSU2TCLib.cpp:1411:29: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     Tve      = (Tve_o+Tve2)/2.0;
                             ^~~
In file included from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CFluidModel.hpp:33,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CNEMOGas.hpp:30,
                 from ../SU2_CFD/src/fluid/../../include/fluid/CSU2TCLib.hpp:30,
                 from ../SU2_CFD/src/fluid/CSU2TCLib.cpp:28:
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/fluid/../../include/fluid/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[282/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CAdjElasticityOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjElasticityOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjElasticityOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjElasticityOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjElasticityOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjElasticityOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjElasticityOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjElasticityOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjElasticityOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjElasticityOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[283/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CAdjFlowCompOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjFlowCompOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjFlowCompOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjFlowCompOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjFlowCompOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjFlowCompOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjFlowCompOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjFlowCompOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjFlowCompOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjFlowCompOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/CAdjFlowCompOutput.cpp: In member function 'virtual void CAdjFlowCompOutput::LoadHistoryData(CConfig*, CGeometry*, CSolver**)':
../SU2_CFD/src/output/CAdjFlowCompOutput.cpp:285:87: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   SetHistoryOutputValue("SENS_AOA", adjflow_solver->GetTotal_Sens_AoA() * PI_NUMBER / 180.0);
                                                                                       ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjFlowCompOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjFlowCompOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[284/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CMultizoneOutput.cpp.o
[285/451] Compiling C++ object Common/src/libSU2Common.a.p/fem_fem_geometry_structure.cpp.o
[286/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CBaselineOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CBaselineOutput.cpp:33:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CBaselineOutput.hpp:30,
                 from ../SU2_CFD/src/output/CBaselineOutput.cpp:30:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CBaselineOutput.cpp:33:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CBaselineOutput.hpp:30,
                 from ../SU2_CFD/src/output/CBaselineOutput.cpp:30:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CBaselineOutput.cpp:33:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CBaselineOutput.hpp:30,
                 from ../SU2_CFD/src/output/CBaselineOutput.cpp:30:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[287/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CAdjFlowIncOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjFlowIncOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjFlowIncOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjFlowIncOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjFlowIncOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjFlowIncOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjFlowIncOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CAdjFlowIncOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CAdjFlowIncOutput.hpp:30,
                 from ../SU2_CFD/src/output/CAdjFlowIncOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[288/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CElasticityOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CElasticityOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CElasticityOutput.hpp:30,
                 from ../SU2_CFD/src/output/CElasticityOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CElasticityOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CElasticityOutput.hpp:30,
                 from ../SU2_CFD/src/output/CElasticityOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CElasticityOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CElasticityOutput.hpp:30,
                 from ../SU2_CFD/src/output/CElasticityOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[289/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CFlowCompFEMOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowCompFEMOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowCompFEMOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowCompFEMOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowCompFEMOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowCompFEMOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowCompFEMOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowCompFEMOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowCompFEMOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowCompFEMOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[290/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CFVMOutput.cpp.o
[291/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CMeshOutput.cpp.o
[292/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CParallelDataSorter.cpp.o
[293/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CFlowCompOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowCompOutput.cpp:31:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowCompOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowCompOutput.cpp:28:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowCompOutput.cpp:31:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowCompOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowCompOutput.cpp:28:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowCompOutput.cpp:31:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowCompOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowCompOutput.cpp:28:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[294/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_output_physics.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/output_physics.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_physics.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/output_physics.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_physics.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/output_physics.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_physics.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_physics.cpp: In member function 'void COutputLegacy::ComputeTurboPerformance(CSolver*, CGeometry*, CConfig*)':
../SU2_CFD/src/output/output_physics.cpp:146:88: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
             NuFactorIn[iMarkerTP][iSpan]        = nu*DensityIn[iMarkerTP][iSpan]/muLam/0.005;
                                                                                        ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_physics.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_physics.cpp:233:90: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
             NuFactorOut[iMarkerTP][iSpan]        = nu*DensityOut[iMarkerTP][iSpan]/muLam/0.005;
                                                                                          ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_physics.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_physics.cpp:239:145: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       EntropyGen[iMarkerTP][iSpan]         = (EntropyOut[iMarkerTP][iSpan] - EntropyIn[iMarkerTP][iSpan])/abs(EntropyIn_BC[iMarkerTP][iSpan] + 1);
                                                                                                                                                 ^
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_physics.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[295/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CHeatOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CHeatOutput.cpp:31:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CHeatOutput.hpp:30,
                 from ../SU2_CFD/src/output/CHeatOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CHeatOutput.cpp:31:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CHeatOutput.hpp:30,
                 from ../SU2_CFD/src/output/CHeatOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CHeatOutput.cpp:31:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CHeatOutput.hpp:30,
                 from ../SU2_CFD/src/output/CHeatOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[296/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CFVMDataSorter.cpp.o
[297/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CFEMDataSorter.cpp.o
[298/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CParallelFileWriter.cpp.o
../SU2_CFD/src/output/filewriter/CParallelFileWriter.cpp: In member function 'bool CFileWriter::CloseMPIFile()':
../SU2_CFD/src/output/filewriter/CParallelFileWriter.cpp:271:30: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   bandwidth = fileSize/(1.0e6)/usedTime;
                              ^
In file included from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/CFileWriter.hpp:29,
                 from ../SU2_CFD/src/output/filewriter/CParallelFileWriter.cpp:28:
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[299/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CParaviewFileWriter.cpp.o
../SU2_CFD/src/output/filewriter/CParaviewFileWriter.cpp: In member function 'virtual void CParaviewFileWriter::Write_Data()':
../SU2_CFD/src/output/filewriter/CParaviewFileWriter.cpp:365:30: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   bandwidth = fileSize/(1.0e6)/usedTime;
                              ^
In file included from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/CFileWriter.hpp:29,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/CParaviewFileWriter.hpp:29,
                 from ../SU2_CFD/src/output/filewriter/CParaviewFileWriter.cpp:28:
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[300/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CSurfaceFEMDataSorter.cpp.o
[301/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CFlowIncOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowIncOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowIncOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowIncOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowIncOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowIncOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowIncOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowIncOutput.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowIncOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowIncOutput.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[302/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CParaviewBinaryFileWriter.cpp.o
[303/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CTecplotFileWriter.cpp.o
../SU2_CFD/src/output/filewriter/CTecplotFileWriter.cpp: In member function 'virtual void CTecplotFileWriter::Write_Data()':
../SU2_CFD/src/output/filewriter/CTecplotFileWriter.cpp:223:30: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   bandwidth = fileSize/(1.0e6)/usedTime;
                              ^
In file included from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/CFileWriter.hpp:29,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/CTecplotFileWriter.hpp:29,
                 from ../SU2_CFD/src/output/filewriter/CTecplotFileWriter.cpp:28:
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[304/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CCSVFileWriter.cpp.o
[305/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CNEMOCompOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CNEMOCompOutput.cpp:41:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CNEMOCompOutput.hpp:30,
                 from ../SU2_CFD/src/output/CNEMOCompOutput.cpp:38:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CNEMOCompOutput.cpp:41:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CNEMOCompOutput.hpp:30,
                 from ../SU2_CFD/src/output/CNEMOCompOutput.cpp:38:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CNEMOCompOutput.cpp:41:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CNEMOCompOutput.hpp:30,
                 from ../SU2_CFD/src/output/CNEMOCompOutput.cpp:38:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[306/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CSurfaceFVMDataSorter.cpp.o
[307/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CSU2BinaryFileWriter.cpp.o
[308/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CSTLFileWriter.cpp.o
[309/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CSU2FileWriter.cpp.o
../SU2_CFD/src/output/filewriter/CSU2FileWriter.cpp: In member function 'virtual void CSU2FileWriter::Write_Data()':
../SU2_CFD/src/output/filewriter/CSU2FileWriter.cpp:94:30: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   bandwidth = fileSize/(1.0e6)/usedTime;
                              ^
In file included from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/CFileWriter.hpp:29,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/CSU2FileWriter.hpp:29,
                 from ../SU2_CFD/src/output/filewriter/CSU2FileWriter.cpp:28:
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[310/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_COutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/COutput.cpp:47:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/COutput.cpp:28:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/COutput.cpp:47:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/COutput.cpp:28:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/COutput.cpp:47:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/COutput.cpp:28:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[311/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CTecplotBinaryFileWriter.cpp.o
../SU2_CFD/src/output/filewriter/CTecplotBinaryFileWriter.cpp: In member function 'virtual void CTecplotBinaryFileWriter::Write_Data()':
../SU2_CFD/src/output/filewriter/CTecplotBinaryFileWriter.cpp:596:30: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   bandwidth = fileSize/(1.0e6)/usedTime;
                              ^
In file included from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/CFileWriter.hpp:29,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/CTecplotBinaryFileWriter.hpp:30,
                 from ../SU2_CFD/src/output/filewriter/CTecplotBinaryFileWriter.cpp:28:
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[312/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CParaviewVTMFileWriter.cpp.o
../SU2_CFD/src/output/filewriter/CParaviewVTMFileWriter.cpp: In member function 'void CParaviewVTMFileWriter::AddDataset(std::__cxx11::string, std::__cxx11::string, CParallelDataSorter*)':
../SU2_CFD/src/output/filewriter/CParaviewVTMFileWriter.cpp:119:36: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   bandwidth = accumulatedBandwidth/nWrittenDatasets;
                                    ^~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/CFileWriter.hpp:29,
                 from ../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/CParaviewVTMFileWriter.hpp:30,
                 from ../SU2_CFD/src/output/filewriter/CParaviewVTMFileWriter.cpp:28:
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/output/filewriter/../../../include/output/filewriter/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[313/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_tools_CWindowingTools.cpp.o
[314/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CParaviewXMLFileWriter.cpp.o
[315/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_filewriter_CSU2MeshFileWriter.cpp.o
[316/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_CFlowOutput.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowOutput.cpp:31:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowOutput.cpp:28:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowOutput.cpp:31:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowOutput.cpp:28:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/CFlowOutput.cpp:31:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowOutput.cpp:28:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/CFlowOutput.cpp: In member function 'void CFlowOutput::Set_NearfieldInverseDesign(CSolver*, const CGeometry*, const CConfig*)':
../SU2_CFD/src/output/CFlowOutput.cpp:805:54: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double AoA = -(config->GetAoA()*PI_NUMBER/180.0);
                                                      ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowOutput.cpp:28:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/CFlowOutput.cpp: In member function 'void CFlowOutput::WriteMetaData(const CConfig*)':
../SU2_CFD/src/output/CFlowOutput.cpp:1285:82: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       meta_file << "SENS_AOA=" << GetHistoryFieldValue("SENS_AOA") * PI_NUMBER / 180.0 << endl;
                                                                                  ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/printing_toolbox.hpp:35,
                 from ../SU2_CFD/src/output/../../include/output/COutput.hpp:38,
                 from ../SU2_CFD/src/output/../../include/output/CFVMOutput.hpp:30,
                 from ../SU2_CFD/src/output/../../include/output/CFlowOutput.hpp:30,
                 from ../SU2_CFD/src/output/CFlowOutput.cpp:28:
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/toolboxes/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[317/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CTransLMVariable.cpp.o
[318/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CIncNSVariable.cpp.o
[319/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CTurbVariable.cpp.o
[320/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CAdjEulerVariable.cpp.o
[321/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CHeatVariable.cpp.o
[322/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CAdjNSVariable.cpp.o
[323/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CDiscAdjFEABoundVariable.cpp.o
[324/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CBaselineVariable.cpp.o
[325/451] Compiling C++ object Common/src/libSU2Common.a.p/CConfig.cpp.o
../Common/src/CConfig.cpp: In member function 'void CConfig::SetPostprocessing(SU2_COMPONENT, short unsigned int, short unsigned int)':
../Common/src/CConfig.cpp:4394:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       RefOriginMoment_X[iMarker] = RefOriginMoment_X[iMarker]/12.0;
                                                               ^~~~
In file included from ../Common/src/../include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/../include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/../include/parallelization/mpi_structure.hpp:37,
                 from ../Common/src/../include/CConfig.hpp:31,
                 from ../Common/src/CConfig.cpp:29:
../Common/src/../include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/../include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/CConfig.cpp:4395:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       RefOriginMoment_Y[iMarker] = RefOriginMoment_Y[iMarker]/12.0;
                                                               ^~~~
In file included from ../Common/src/../include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/../include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/../include/parallelization/mpi_structure.hpp:37,
                 from ../Common/src/../include/CConfig.hpp:31,
                 from ../Common/src/CConfig.cpp:29:
../Common/src/../include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/../include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/CConfig.cpp:4396:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       RefOriginMoment_Z[iMarker] = RefOriginMoment_Z[iMarker]/12.0;
                                                               ^~~~
In file included from ../Common/src/../include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/../include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/../include/parallelization/mpi_structure.hpp:37,
                 from ../Common/src/../include/CConfig.hpp:31,
                 from ../Common/src/CConfig.cpp:29:
../Common/src/../include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/../include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/CConfig.cpp:4405:27: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     RefLength = RefLength/12.0;
                           ^~~~
In file included from ../Common/src/../include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/../include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/../include/parallelization/mpi_structure.hpp:37,
                 from ../Common/src/../include/CConfig.hpp:31,
                 from ../Common/src/CConfig.cpp:29:
../Common/src/../include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/../include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/CConfig.cpp:4407:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     if ((val_nDim == 2) && (!Axisymmetric)) RefArea = RefArea/12.0;
                                                               ^~~~
In file included from ../Common/src/../include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/../include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/../include/parallelization/mpi_structure.hpp:37,
                 from ../Common/src/../include/CConfig.hpp:31,
                 from ../Common/src/CConfig.cpp:29:
../Common/src/../include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/../include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/CConfig.cpp:4408:28: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     else RefArea = RefArea/144.0;
                            ^~~~~
In file included from ../Common/src/../include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/../include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/../include/parallelization/mpi_structure.hpp:37,
                 from ../Common/src/../include/CConfig.hpp:31,
                 from ../Common/src/CConfig.cpp:29:
../Common/src/../include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/../include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/CConfig.cpp:4409:39: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     Length_Reynolds = Length_Reynolds/12.0;
                                       ^~~~
In file included from ../Common/src/../include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/../include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/../include/parallelization/mpi_structure.hpp:37,
                 from ../Common/src/../include/CConfig.hpp:31,
                 from ../Common/src/CConfig.cpp:29:
../Common/src/../include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/../include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/CConfig.cpp:4410:35: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     Highlite_Area = Highlite_Area/144.0;
                                   ^~~~~
In file included from ../Common/src/../include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/../include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/../include/parallelization/mpi_structure.hpp:37,
                 from ../Common/src/../include/CConfig.hpp:31,
                 from ../Common/src/CConfig.cpp:29:
../Common/src/../include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/../include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/CConfig.cpp:4411:25: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     SemiSpan = SemiSpan/12.0;
                         ^~~~
In file included from ../Common/src/../include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/../include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/../include/parallelization/mpi_structure.hpp:37,
                 from ../Common/src/../include/CConfig.hpp:31,
                 from ../Common/src/CConfig.cpp:29:
../Common/src/../include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/../include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../Common/src/CConfig.cpp:4419:67: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         LocationStations[iSections] = LocationStations[iSections]/12.0;
                                                                   ^~~~
In file included from ../Common/src/../include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../Common/src/../include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../Common/src/../include/parallelization/mpi_structure.hpp:37,
                 from ../Common/src/../include/CConfig.hpp:31,
                 from ../Common/src/CConfig.cpp:29:
../Common/src/../include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../Common/src/../include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[326/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CDiscAdjVariable.cpp.o
[327/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CDiscAdjMeshBoundVariable.cpp.o
[328/451] Linking static target Common/src/libSU2Common.a
[329/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CFEABoundVariable.cpp.o
[330/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CTurbSAVariable.cpp.o
[331/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CFEAVariable.cpp.o
[332/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CMeshVariable.cpp.o
[333/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CMeshBoundVariable.cpp.o
[334/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CMeshElement.cpp.o
[335/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CRadP1Variable.cpp.o
[336/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CRadVariable.cpp.o
[337/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CTurbSSTVariable.cpp.o
[338/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CVariable.cpp.o
[339/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CAdjTurbVariable.cpp.o
[340/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CNSVariable.cpp.o
[341/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CIncEulerVariable.cpp.o
[342/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CEulerVariable.cpp.o
[343/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CNEMOEulerVariable.cpp.o
[344/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/variables_CNEMONSVariable.cpp.o
[345/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CSolverFactory.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/CSolverFactory.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CSolverFactory.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/CSolverFactory.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CSolverFactory.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/CSolverFactory.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CSolverFactory.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[346/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/output_output_structure_legacy.cpp.o
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/../../include/solvers/CBaselineSolver.hpp:28,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/../../include/solvers/CBaselineSolver.hpp:28,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/output/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/output/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/output/../../include/solvers/CBaselineSolver.hpp:28,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:32:
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/output/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp: In member function 'void COutputLegacy::SetConvHistory_Body(std::ofstream*, CGeometry****, CSolver*****, CConfig**, CIntegration****, bool, su2double, short unsigned int, short unsigned int)':
../SU2_CFD/src/output/output_structure_legacy.cpp:1124:133: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           Total_Sens_AoA       = solver_container[val_iZone][val_iInst][FinestMesh][ADJFLOW_SOL]->GetTotal_Sens_AoA() * PI_NUMBER / 180.0;
                                                                                                                                     ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:1287:124: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         SPRINTF (end, ", %12.10f, %12.10f, %12.10f\n", su2double(LinSolvIter), config[val_iZone]->GetCFL(MESH_0), timeused/60.0);
                                                                                                                            ^~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:1534:73: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
             SPRINTF (end_fem, ", %lu, %12.10f\n", LinSolvIter, timeused/60.0);
                                                                         ^~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp: In member function 'void COutputLegacy::SpecialOutput_SpanLoad(CSolver*, CGeometry*, CConfig*, bool) const':
../SU2_CFD/src/output/output_structure_legacy.cpp:4306:42: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Alpha = config->GetAoA() * PI_NUMBER / 180.0;
                                          ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4346:80: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         Plane_Normal[1] = -sin(config->GetLocationStations(iSection)*PI_NUMBER/180.0);
                                                                                ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4347:79: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         Plane_Normal[2] = cos(config->GetLocationStations(iSection)*PI_NUMBER/180.0);
                                                                               ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4351:72: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         su2double Tilt_Angle = config->GetNacelleLocation(3)*PI_NUMBER/180;
                                                                        ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4358:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         su2double Toe_Angle = config->GetNacelleLocation(4)*PI_NUMBER/180;
                                                                       ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4403:92: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           Plane_Normal_[1] = -sin((config->GetLocationStations(iSection) + 0.01)*PI_NUMBER/180.0);
                                                                                            ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4404:91: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           Plane_Normal_[2] = cos((config->GetLocationStations(iSection) + 0.01)*PI_NUMBER/180.0);
                                                                                           ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4408:74: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double Tilt_Angle = config->GetNacelleLocation(3)*PI_NUMBER/180;
                                                                          ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4415:73: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double Toe_Angle = config->GetNacelleLocation(4)*PI_NUMBER/180;
                                                                         ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4429:92: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           Plane_Normal_[1] = -sin((config->GetLocationStations(iSection) - 0.01)*PI_NUMBER/180.0);
                                                                                            ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4430:91: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           Plane_Normal_[2] = cos((config->GetLocationStations(iSection) - 0.01)*PI_NUMBER/180.0);
                                                                                           ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4434:74: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double Tilt_Angle = config->GetNacelleLocation(3)*PI_NUMBER/180;
                                                                          ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4441:73: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double Toe_Angle = config->GetNacelleLocation(4)*PI_NUMBER/180;
                                                                         ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4546:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
               su2double Angle = theta_deg*PI_NUMBER/180 - 0.5*PI_NUMBER;
                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:4611:54: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         CL_Inv = cos(Dihedral_Trailing * PI_NUMBER / 180.0) * fabs( -ForceInviscid[0] * sin(Alpha) + ForceInviscid[2] * cos(Alpha) )/ Chord;
                                                      ^~~~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp: In member function 'void COutputLegacy::SpecialOutput_Distortion(CSolver*, CGeometry*, CConfig*, bool) const':
../SU2_CFD/src/output/output_structure_legacy.cpp:5354:112: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         r[iStation] = sqrt(  r[iStation-1]*r[iStation-1] + (r[nStation]*r[nStation] - r[0]*r[0])/float(nStation) );
                                                                                                                ^
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5363:47: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         radians = -iAngle*Theta*2.0*PI_NUMBER/360;
                                               ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5438:78: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           PT_Sector[iAngle] += ProbeArray[iAngle][iStation][3]/float(nStation);
                                                                              ^
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5439:85: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           PT_Mean           += ProbeArray[iAngle][iStation][3]/float(nStation*nAngle);
                                                                                     ^
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5440:85: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           q_Mean            += ProbeArray[iAngle][iStation][4]/float(nStation*nAngle);
                                                                                     ^
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5500:112: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         r[iStation] = sqrt(  r[iStation-1]*r[iStation-1] + (r[nStation]*r[nStation] - r[0]*r[0])/float(nStation) );
                                                                                                                ^
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5509:47: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         radians = -iAngle*Theta*2.0*PI_NUMBER/360;
                                               ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5587:52: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           PT_Station[iStation] += PT / float(nAngle);
                                                    ^
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5589:75: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           PT_Mean += ProbeArray[iAngle][iStation][3]/float(nStation*nAngle);
                                                                           ^
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5689:56: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           Mach_Station[iStation] += Mach / float(nAngle);
                                                        ^
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5691:77: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           Mach_Mean += ProbeArray[iAngle][iStation][3]/float(nStation*nAngle);
                                                                             ^
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5745:112: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         r[iStation] = sqrt(  r[iStation-1]*r[iStation-1] + (r[nStation]*r[nStation] - r[0]*r[0])/float(nStation) );
                                                                                                                ^
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5754:47: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         radians = -iAngle*Theta*2.0*PI_NUMBER/360;
                                               ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5947:85: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
               Filtered_Mach = (4.0*Mach_ij+Mach_ip1j+Mach_im1j+Mach_ijp1+Mach_ijm1)/8.0;
                                                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5958:91: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
               Filtered_Alpha = (4.0*Alpha_ij+Alpha_ip1j+Alpha_im1j+Alpha_ijp1+Alpha_ijm1)/8.0;
                                                                                           ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/output/output_structure_legacy.cpp:5969:85: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
               Filtered_Beta = (4.0*Beta_ij+Beta_ip1j+Beta_im1j+Beta_ijp1+Beta_ijm1)/8.0;
                                                                                     ^~~
In file included from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/output/../../include/output/COutputLegacy.hpp:31,
                 from ../SU2_CFD/src/output/output_structure_legacy.cpp:29:
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/output/../../include/output/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[347/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CAdjTurbSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjTurbSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjTurbSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjTurbSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjTurbSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjTurbSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjTurbSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[348/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CBaselineSolver_FEM.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver_FEM.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver_FEM.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver_FEM.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver_FEM.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver_FEM.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver_FEM.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver_FEM.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver_FEM.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver_FEM.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver_FEM.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver_FEM.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver_FEM.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[349/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CBaselineSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CBaselineSolver.hpp:28,
                 from ../SU2_CFD/src/solvers/CBaselineSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[350/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CRadSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CRadSolver.cpp: In member function 'virtual void CRadSolver::SetVolumetricHeatSource(CGeometry*, CConfig*)':
../SU2_CFD/src/solvers/CRadSolver.cpp:50:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double alpha = config->GetHeatSource_Rot_Z() * PI_NUMBER/180.0;
                                                               ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[351/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CDiscAdjMeshSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjMeshSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CDiscAdjMeshSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjMeshSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CDiscAdjMeshSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjMeshSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CDiscAdjMeshSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjMeshSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CDiscAdjMeshSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjMeshSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CDiscAdjMeshSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjMeshSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CDiscAdjMeshSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[352/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CDiscAdjSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CDiscAdjSolver.cpp: In member function 'virtual void CDiscAdjSolver::RegisterVariables(CGeometry*, CConfig*, bool)':
../SU2_CFD/src/solvers/CDiscAdjSolver.cpp:179:57: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     Alpha                  = config->GetAoA()*PI_NUMBER/180.0;
                                                         ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CDiscAdjSolver.cpp:180:57: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     Beta                   = config->GetAoS()*PI_NUMBER/180.0;
                                                         ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[353/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CRadP1Solver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadP1Solver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadP1Solver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadP1Solver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadP1Solver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadP1Solver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadP1Solver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadP1Solver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadP1Solver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadP1Solver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadP1Solver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CRadP1Solver.hpp:30,
                 from ../SU2_CFD/src/solvers/CRadP1Solver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[354/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CDiscAdjFEASolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CDiscAdjFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CDiscAdjFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[355/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CAdjNSSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjNSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjNSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjNSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjNSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjNSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjNSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[356/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CAdjEulerSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CAdjEulerSolver.cpp: In member function 'virtual void CAdjEulerSolver::SetForceProj_Vector(CGeometry*, CSolver**, CConfig*)':
../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:684:61: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha            = (config->GetAoA()*PI_NUMBER)/180.0;
                                                             ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:685:61: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta             = (config->GetAoS()*PI_NUMBER)/180.0;
                                                             ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CAdjEulerSolver.cpp: In member function 'void CAdjEulerSolver::SetFarfield_AoA(CGeometry*, CSolver**, CConfig*, short unsigned int, bool)':
../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:2235:96: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     cout << "Target dCL/dAlpha: 0.0 (1/deg), current dCL/dAlpha: " << Total_Sens_AoA*PI_NUMBER/180;
                                                                                                ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CAdjEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CAdjEulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[357/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CFEASolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEASolver.cpp: In member function 'void CFEASolver::Compute_NodalStress(CGeometry*, CNumerics**, const CConfig*)':
../SU2_CFD/src/solvers/CFEASolver.cpp:1304:77: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double weight = simp_penalty / geometry->nodes->GetnElem(iPoint);
                                                                             ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEASolver.cpp: In member function 'void CFEASolver::Compute_IntegrationConstants(const CConfig*)':
../SU2_CFD/src/solvers/CFEASolver.cpp:1571:25: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       a_dt[5]= (Delta_t/2) * (gamma/beta - 2);
                         ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEASolver.cpp: In member function 'void CFEASolver::Compute_OFRefGeom(CGeometry*, const CConfig*)':
../SU2_CFD/src/solvers/CFEASolver.cpp:2902:74: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double averaged_gradient = Total_ForwardGradient / (TimeIter + 1.0);
                                                                          ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEASolver.cpp: In member function 'void CFEASolver::Compute_OFRefNode(CGeometry*, const CConfig*)':
../SU2_CFD/src/solvers/CFEASolver.cpp:2945:74: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double averaged_gradient = Total_ForwardGradient / (TimeIter + 1.0);
                                                                          ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CFEASolver.cpp:30:0:
../SU2_CFD/src/solvers/../../include/numerics/elasticity/CFEAElasticity.hpp: In instantiation of 'static su2double CFEAElasticity::VonMisesStress(short unsigned int, const T&) [with T = const cplx*; su2double = cplx]':
../SU2_CFD/src/solvers/CFEASolver.cpp:1328:89:   required from here
../SU2_CFD/src/solvers/../../include/numerics/elasticity/CFEAElasticity.hpp:187:44: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double S1, S2; S1 = S2 = (Sxx+Syy)/2;
                                   ~~~~~~~~~^~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CFEASolver.cpp:30:0:
../SU2_CFD/src/solvers/../../include/numerics/elasticity/CFEAElasticity.hpp:188:44: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double tauMax = sqrt(pow((Sxx-Syy)/2, 2) + pow(Sxy,2));
                                   ~~~~~~~~~^~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CFEASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h: At global scope:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:90:15: warning: inline function 'cplx cplx::operator*(const long unsigned int&) const' used but never defined
   inline cplx operator*(const long unsigned int&) const; // BJB
               ^~~~~~~~
[358/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CMeshSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CMeshSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CMeshSolver.cpp:30:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../../Common/include/adt/./CADTBaseClass.hpp:33,
                 from ../SU2_CFD/src/solvers/../../../Common/include/adt/CADTPointsOnlyClass.hpp:29,
                 from ../SU2_CFD/src/solvers/CMeshSolver.cpp:28:
../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CMeshSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CMeshSolver.cpp:30:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../../Common/include/adt/./CADTBaseClass.hpp:33,
                 from ../SU2_CFD/src/solvers/../../../Common/include/adt/CADTPointsOnlyClass.hpp:29,
                 from ../SU2_CFD/src/solvers/CMeshSolver.cpp:28:
../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEASolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CMeshSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CMeshSolver.cpp:30:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../../Common/include/adt/./CADTBaseClass.hpp:33,
                 from ../SU2_CFD/src/solvers/../../../Common/include/adt/CADTPointsOnlyClass.hpp:29,
                 from ../SU2_CFD/src/solvers/CMeshSolver.cpp:28:
../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../../Common/include/adt/./../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[359/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CTemplateSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTemplateSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTemplateSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTemplateSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTemplateSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTemplateSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTemplateSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTemplateSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTemplateSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTemplateSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTemplateSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTemplateSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTemplateSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[360/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CHeatSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CHeatSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CHeatSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CHeatSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CHeatSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CHeatSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CHeatSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CHeatSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CHeatSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CHeatSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CHeatSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CHeatSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CHeatSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[361/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CNEMOEulerSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:32,
                 from ../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:32,
                 from ../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:32,
                 from ../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp: In constructor 'CNEMOEulerSolver::CNEMOEulerSolver(CGeometry*, CConfig*, short unsigned int, bool)':
../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:179:41: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Alpha    = config->GetAoA()*PI_NUMBER/180.0;
                                         ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:180:41: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Beta     = config->GetAoS()*PI_NUMBER/180.0;
                                         ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp: In member function 'void CNEMOEulerSolver::SetNondimensionalization(CConfig*, short unsigned int)':
../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:996:56: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha         = config->GetAoA()*PI_NUMBER/180.0;
                                                        ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:997:56: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta          = config->GetAoS()*PI_NUMBER/180.0;
                                                        ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNEMOEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[362/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CTransLMSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTransLMSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTransLMSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTransLMSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTransLMSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTransLMSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTransLMSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTransLMSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTransLMSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTransLMSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTransLMSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTransLMSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTransLMSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[363/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CIncEulerSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CIncEulerSolver.cpp: In member function 'void CIncEulerSolver::SetNondimensionalization(CConfig*, short unsigned int)':
../SU2_CFD/src/solvers/CIncEulerSolver.cpp:278:85: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       config->SetGas_Constant(UNIVERSAL_GAS_CONSTANT/(config->GetMolecular_Weight()/1000.0));
                                                                                     ^~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CIncEulerSolver.cpp:288:85: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       config->SetGas_Constant(UNIVERSAL_GAS_CONSTANT/(config->GetMolecular_Weight()/1000.0));
                                                                                     ^~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CIncEulerSolver.cpp:460:93: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
             config->SetCp_PolyCoeffND(config->GetCp_PolyCoeff(iVar)*pow(Temperature_Ref,iVar)/Gas_Constant_Ref, iVar);
                                                                                             ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:12:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../SU2_CFD/src/solvers/CIncEulerSolver.cpp:484:89: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         config->SetMu_PolyCoeffND(config->GetMu_PolyCoeff(iVar)*pow(Temperature_Ref,iVar)/Viscosity_Ref, iVar);
                                                                                         ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:12:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
../SU2_CFD/src/solvers/CIncEulerSolver.cpp:494:89: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         config->SetKt_PolyCoeffND(config->GetKt_PolyCoeff(iVar)*pow(Temperature_Ref,iVar)/Conductivity_Ref, iVar);
                                                                                         ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:436:13: note: candidate 1: cplx pow(const cplx&, const int&)
 inline cplx pow(const cplx& a, const int& b)
             ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:12:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncEulerSolver.cpp:28:
/home/bburke38/anaconda3/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/complex:1864:5: note: candidate 2: std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type> std::pow(const std::complex<_Tp>&, const _Up&) [with _Tp = double; _Up = short unsigned int; typename __gnu_cxx::__promote_2<_Tp, _Up>::__type = double]
     pow(const std::complex<_Tp>& __x, const _Up& __y)
     ^~~
[364/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CFEM_DG_NSSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp: In member function 'virtual void CFEM_DG_NSSolver::Friction_Forces(const CGeometry*, const CConfig*)':
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:210:61: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double Alpha        = config->GetAoA()*PI_NUMBER/180.0;
                                                             ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:211:61: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double Beta         = config->GetAoS()*PI_NUMBER/180.0;
                                                             ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp: In member function 'virtual void CFEM_DG_NSSolver::SetTime_Step(CGeometry*, CSolver**, CConfig*, short unsigned int, long unsigned int)':
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:1297:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         VecDeltaTime[l] = Min_Delta_Time/volElem[l].factTimeLevel;
                                                     ^~~~~~~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:349:13: note: candidate 1: cplx operator/(const cplx&, const unsigned int&)
 inline cplx operator/(const cplx& z, const unsigned int& i)
             ^~~~~~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp: In member function 'virtual void CFEM_DG_NSSolver::ADER_DG_AliasedPredictorResidual_2D(CConfig*, CVolumeElementFEM*, const su2double*, short unsigned int, short unsigned int, su2double*, su2double*)':
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:1329:45: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double lenScale = elem->lenScale/nPoly;
                                             ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp: In member function 'virtual void CFEM_DG_NSSolver::ADER_DG_AliasedPredictorResidual_3D(CConfig*, CVolumeElementFEM*, const su2double*, short unsigned int, short unsigned int, su2double*, su2double*)':
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:1653:45: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double lenScale = elem->lenScale/nPoly;
                                             ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp: In member function 'virtual void CFEM_DG_NSSolver::ADER_DG_NonAliasedPredictorResidual_2D(CConfig*, CVolumeElementFEM*, const su2double*, short unsigned int, short unsigned int, su2double*, su2double*)':
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:2053:45: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double lenScale = elem->lenScale/nPoly;
                                             ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp: In member function 'virtual void CFEM_DG_NSSolver::ADER_DG_NonAliasedPredictorResidual_3D(CConfig*, CVolumeElementFEM*, const su2double*, short unsigned int, short unsigned int, su2double*, su2double*)':
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:2446:45: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double lenScale = elem->lenScale/nPoly;
                                             ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp: In member function 'virtual void CFEM_DG_NSSolver::Volume_Residual(CConfig*, long unsigned int, long unsigned int, su2double*)':
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:3334:65: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
               const su2double lenScale = volElem[lInd].lenScale/nPoly;
                                                                 ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:3527:65: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
               const su2double lenScale = volElem[lInd].lenScale/nPoly;
                                                                 ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp: In member function 'virtual void CFEM_DG_NSSolver::BC_Sym_Plane(CConfig*, long unsigned int, long unsigned int, const CSurfaceElementFEM*, su2double*, CNumerics*, su2double*)':
../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:5236:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       const su2double lenScale_LES = volElem[elemID].lenScale/nPoly;
                                                               ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_NSSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_NSSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[365/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CTurbSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[366/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CTurbSASolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSASolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CTurbSASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSASolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CTurbSASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSASolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CTurbSASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSASolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CTurbSASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSASolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CTurbSASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSASolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CTurbSASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CTurbSASolver.cpp: In member function 'void CTurbSASolver::SetDES_LengthScale(CSolver**, CGeometry*, CConfig*)':
../SU2_CFD/src/solvers/CTurbSASolver.cpp:1497:71: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         vortexTiltingMeasure = (vortexTiltingMeasure/fabs(nNeigh + 1.0));
                                                                       ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSASolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CTurbSASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CTurbSASolver.cpp:1504:36: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         maxDelta = (ln_max/sqrt(3.0)) * f_kh;
                                    ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSASolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CTurbSASolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[367/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CTurbSSTSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSSTSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSSTSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSSTSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSSTSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSSTSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSSTSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSSTSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSSTSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSSTSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSSTSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CTurbSSTSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CTurbSSTSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[368/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_template.cpp.o
[369/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CIncNSSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CIncNSSolver.cpp: In member function 'void CIncNSSolver::SetTauWall_WF(CGeometry*, CSolver**, const CConfig*)':
../SU2_CFD/src/solvers/CIncNSSolver.cpp:811:103: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           Y_Plus = U_Plus + Y_Plus_White - (exp(-1.0*kappa*B)* (1.0 + kUp + 0.5*kUp*kUp + kUp*kUp*kUp/6.0));
                                                                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CIncNSSolver.cpp:816:92: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                                            (1.0 + kappa*U_Plus + kappa*kappa*U_Plus*U_Plus/2.0)
                                                                                            ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:31:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In instantiation of 'void CFVMFlowSolverBase<VariableType, FlowRegime>::Pressure_Forces(const CGeometry*, const CConfig*) [with VariableType = CIncEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)1]':
../SU2_CFD/src/solvers/CIncNSSolver.cpp:35:16:   required from here
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:1799:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha = config->GetAoA() * PI_NUMBER / 180.0;
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:31:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:1800:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta = config->GetAoS() * PI_NUMBER / 180.0;
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:31:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In instantiation of 'void CFVMFlowSolverBase<VariableType, FlowRegime>::Momentum_Forces(const CGeometry*, const CConfig*) [with VariableType = CIncEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)1]':
../SU2_CFD/src/solvers/CIncNSSolver.cpp:35:16:   required from here
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2119:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha = config->GetAoA() * PI_NUMBER / 180.0;
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:31:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2120:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta = config->GetAoS() * PI_NUMBER / 180.0;
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:31:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In instantiation of 'void CFVMFlowSolverBase<VariableType, FlowRegime>::Friction_Forces(const CGeometry*, const CConfig*) [with VariableType = CIncEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)1]':
../SU2_CFD/src/solvers/CIncNSSolver.cpp:35:16:   required from here
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2408:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha = config->GetAoA() * PI_NUMBER / 180.0;
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:31:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2409:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta = config->GetAoS() * PI_NUMBER / 180.0;
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CIncNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CIncNSSolver.cpp:31:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In member function 'void CFVMFlowSolverBase<VariableType, FlowRegime>::EdgeFluxResidual(const CGeometry*, const CSolver* const*, const CConfig*) [with VariableType = CIncEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)1]':
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:1564:9: note: The ABI for passing parameters with 32-byte alignment has changed in GCC 4.6
         edgeNumerics->ComputeFlux(iEdge, *config, *geometry, *nodes, UpdateType::COLORING, mask, LinSysRes, Jacobian);
         ^~~~~~~~~~~~
[370/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/CSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/CSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/CSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CSolver.cpp: In member function 'void CSolver::Aeroelastic(CSurfaceMovement*, CGeometry*, CConfig*, long unsigned int)':
../SU2_CFD/src/solvers/CSolver.cpp:2295:48: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha = config->GetAoA()*PI_NUMBER/180.0;
                                                ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CSolver.cpp: In member function 'void CSolver::SolveTypicalSectionWingModel(CGeometry*, su2double, su2double, CConfig*, short unsigned int, std::vector<cplx>&)':
../SU2_CFD/src/solvers/CSolver.cpp:2457:52: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double b       = config->GetLength_Reynolds()/2.0; // airfoil semichord, Reynolds length is by defaul 1.0
                                                    ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h: At global scope:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:90:15: warning: inline function 'cplx cplx::operator*(const long unsigned int&) const' used but never defined
   inline cplx operator*(const long unsigned int&) const; // BJB
               ^~~~~~~~
[371/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_heat.cpp.o
[372/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CNSSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp: In member function 'void CNSSolver::AddDynamicGridResidualContribution(long unsigned int, long unsigned int, const CGeometry*, const su2double*, su2double, const su2double*, su2double**, su2double&, su2double&) const':
../SU2_CFD/src/solvers/CNSSolver.cpp:380:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double thetax = theta2 + UnitNormal[0]*UnitNormal[0]/3.0;
                                                               ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp:381:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double thetay = theta2 + UnitNormal[1]*UnitNormal[1]/3.0;
                                                               ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp:383:52: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double etaz = UnitNormal[0]*UnitNormal[1]/3.0;
                                                    ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp:393:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double thetax = theta2 + UnitNormal[0]*UnitNormal[0]/3.0;
                                                               ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp:394:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double thetay = theta2 + UnitNormal[1]*UnitNormal[1]/3.0;
                                                               ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp:395:63: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double thetaz = theta2 + UnitNormal[2]*UnitNormal[2]/3.0;
                                                               ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp:397:52: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double etaz = UnitNormal[0]*UnitNormal[1]/3.0;
                                                    ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp:398:52: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double etax = UnitNormal[1]*UnitNormal[2]/3.0;
                                                    ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp:399:52: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double etay = UnitNormal[0]*UnitNormal[2]/3.0;
                                                    ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp: In member function 'void CNSSolver::BC_Isothermal_Wall_Generic(CGeometry*, CSolver**, CNumerics*, CNumerics*, CConfig*, short unsigned int, bool)':
../SU2_CFD/src/solvers/CNSSolver.cpp:732:82: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double dTdrho = 1.0/Density * ( -Twall + (Gamma-1.0)/Gas_Constant*(Vel2/2.0) );
                                                                                  ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp: In member function 'void CNSSolver::SetTauWall_WF(CGeometry*, CSolver**, const CConfig*)':
../SU2_CFD/src/solvers/CNSSolver.cpp:952:111: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         su2double Y_Plus = U_Plus + Y_Plus_White - (exp(-1.0*kappa*B)* (1.0 + kUp + 0.5*kUp*kUp + kUp*kUp*kUp/6.0));
                                                                                                               ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CNSSolver.cpp:957:94: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                                              (1.0 + kappa*U_Plus + kappa*kappa*U_Plus*U_Plus/2.0)
                                                                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In instantiation of 'void CFVMFlowSolverBase<VariableType, FlowRegime>::Pressure_Forces(const CGeometry*, const CConfig*) [with VariableType = CEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)0]':
../SU2_CFD/src/solvers/CNSSolver.cpp:36:16:   required from here
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:1799:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha = config->GetAoA() * PI_NUMBER / 180.0;
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:1800:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta = config->GetAoS() * PI_NUMBER / 180.0;
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In instantiation of 'void CFVMFlowSolverBase<VariableType, FlowRegime>::Momentum_Forces(const CGeometry*, const CConfig*) [with VariableType = CEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)0]':
../SU2_CFD/src/solvers/CNSSolver.cpp:36:16:   required from here
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2119:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha = config->GetAoA() * PI_NUMBER / 180.0;
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2120:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta = config->GetAoS() * PI_NUMBER / 180.0;
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In instantiation of 'void CFVMFlowSolverBase<VariableType, FlowRegime>::Friction_Forces(const CGeometry*, const CConfig*) [with VariableType = CEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)0]':
../SU2_CFD/src/solvers/CNSSolver.cpp:36:16:   required from here
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2408:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha = config->GetAoA() * PI_NUMBER / 180.0;
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2409:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta = config->GetAoS() * PI_NUMBER / 180.0;
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNSSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CNSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In member function 'void CFVMFlowSolverBase<VariableType, FlowRegime>::EdgeFluxResidual(const CGeometry*, const CSolver* const*, const CConfig*) [with VariableType = CEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)0]':
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:1564:9: note: The ABI for passing parameters with 32-byte alignment has changed in GCC 4.6
         edgeNumerics->ComputeFlux(iEdge, *config, *geometry, *nodes, UpdateType::COLORING, mask, LinSysRes, Jacobian);
         ^~~~~~~~~~~~
[373/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_CNumerics.cpp.o
../SU2_CFD/src/numerics/CNumerics.cpp: In member function 'void CNumerics::GetPreconditionedProjJac(const su2double*, const su2double*, const su2double*, const su2double*, su2double**) const':
../SU2_CFD/src/numerics/CNumerics.cpp:362:133: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     val_invPrecon_A[0][jDim+1] = sqrt((*val_betainc2))*val_normal[jDim]*(*val_density)*(-val_lambda[nDim] + val_lambda[nDim+1])/(2.0);
                                                                                                                                     ^
In file included from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/../../include/numerics/CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/CNumerics.cpp:31:
../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/CNumerics.cpp:365:117: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         val_invPrecon_A[iDim+1][jDim+1] = (val_lambda[nDim] + val_lambda[nDim+1])*val_normal[iDim]*val_normal[iDim]/2.0;
                                                                                                                     ^~~
In file included from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/../../include/numerics/CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/CNumerics.cpp:31:
../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/CNumerics.cpp:371:142: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         val_invPrecon_A[iDim+1][jDim+1] = val_normal[iDim]*val_normal[jDim]*(-2.0*val_lambda[0] + val_lambda[nDim] + val_lambda[nDim+1])/(2.0);
                                                                                                                                              ^
In file included from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/../../include/numerics/CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/CNumerics.cpp:31:
../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/../../include/numerics/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[374/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CNEMONSSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In instantiation of 'void CFVMFlowSolverBase<VariableType, FlowRegime>::Pressure_Forces(const CGeometry*, const CConfig*) [with VariableType = CNEMOEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)0]':
../SU2_CFD/src/solvers/CNEMONSSolver.cpp:36:16:   required from here
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:1799:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha = config->GetAoA() * PI_NUMBER / 180.0;
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:1800:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta = config->GetAoS() * PI_NUMBER / 180.0;
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In instantiation of 'void CFVMFlowSolverBase<VariableType, FlowRegime>::Momentum_Forces(const CGeometry*, const CConfig*) [with VariableType = CNEMOEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)0]':
../SU2_CFD/src/solvers/CNEMONSSolver.cpp:36:16:   required from here
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2119:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha = config->GetAoA() * PI_NUMBER / 180.0;
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2120:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta = config->GetAoS() * PI_NUMBER / 180.0;
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In instantiation of 'void CFVMFlowSolverBase<VariableType, FlowRegime>::Friction_Forces(const CGeometry*, const CConfig*) [with VariableType = CNEMOEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)0]':
../SU2_CFD/src/solvers/CNEMONSSolver.cpp:36:16:   required from here
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2408:50: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha = config->GetAoA() * PI_NUMBER / 180.0;
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:2409:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta = config->GetAoS() * PI_NUMBER / 180.0;
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CVariable.hpp:32,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../variables/CNEMOEulerVariable.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMOEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CNEMONSSolver.hpp:34,
                 from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../variables/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/CNEMONSSolver.cpp:32:0:
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl: In member function 'void CFVMFlowSolverBase<VariableType, FlowRegime>::EdgeFluxResidual(const CGeometry*, const CSolver* const*, const CConfig*) [with VariableType = CNEMOEulerVariable; ENUM_REGIME FlowRegime = (ENUM_REGIME)0]':
../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.inl:1564:9: note: The ABI for passing parameters with 32-byte alignment has changed in GCC 4.6
         edgeNumerics->ComputeFlux(iEdge, *config, *geometry, *nodes, UpdateType::COLORING, mask, LinSysRes, Jacobian);
         ^~~~~~~~~~~~
[375/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_radiation.cpp.o
[376/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CFEM_DG_EulerSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp: In member function 'void CFEM_DG_EulerSolver::SetNondimensionalization(CConfig*, short unsigned int, bool)':
../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:789:59: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha            = config->GetAoA()*PI_NUMBER/180.0;
                                                           ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:790:59: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta             = config->GetAoS()*PI_NUMBER/180.0;
                                                           ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp: In member function 'virtual void CFEM_DG_EulerSolver::SetTime_Step(CGeometry*, CSolver**, CConfig*, short unsigned int, long unsigned int)':
../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:3742:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         VecDeltaTime[l] = Min_Delta_Time/volElem[l].factTimeLevel;
                                                     ^~~~~~~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:349:13: note: candidate 1: cplx operator/(const cplx&, const unsigned int&)
 inline cplx operator/(const cplx& z, const unsigned int& i)
             ^~~~~~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp: In member function 'virtual void CFEM_DG_EulerSolver::Pressure_Forces(const CGeometry*, const CConfig*)':
../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:6728:61: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double Alpha        = config->GetAoA()*PI_NUMBER/180.0;
                                                             ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:6729:61: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double Beta         = config->GetAoS()*PI_NUMBER/180.0;
                                                             ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFEM_DG_EulerSolver.hpp:31,
                 from ../SU2_CFD/src/solvers/CFEM_DG_EulerSolver.cpp:29:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[377/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_transition.cpp.o
[378/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_flow_convection_fds.cpp.o
[379/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_flow_convection_cusp.cpp.o
[380/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_flow_convection_fvs.cpp.o
[381/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_flow_convection_roe.cpp.o
../SU2_CFD/src/numerics/flow/convection/roe.cpp: In member function 'void CUpwGeneralRoe_Flow::ComputeRoeAverage()':
../SU2_CFD/src/numerics/flow/convection/roe.cpp:999:47: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   RoeKappa = (Kappa_i + Kappa_j + 4*RoeKappa)/6;
                                               ^
In file included from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/roe.hpp:31,
                 from ../SU2_CFD/src/numerics/flow/convection/roe.cpp:28:
../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/flow/convection/roe.cpp:1001:39: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   RoeChi = (Chi_i + Chi_j + 4*RoeChi)/6;
                                       ^
In file included from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/roe.hpp:31,
                 from ../SU2_CFD/src/numerics/flow/convection/roe.cpp:28:
../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[382/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_flow_convection_ausm_slau.cpp.o
[383/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_flow_convection_hllc.cpp.o
[384/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_flow_convection_centered.cpp.o
../SU2_CFD/src/numerics/flow/convection/centered.cpp: In member function 'virtual CNumerics::ResidualType<> CCentLaxInc_Flow::ComputeResidual(const CConfig*)':
../SU2_CFD/src/numerics/flow/convection/centered.cpp:217:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Epsilon_0 = Param_Kappa_0*sc0*su2double(nDim)/3.0;
                                                 ^~~
In file included from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/centered.hpp:31,
                 from ../SU2_CFD/src/numerics/flow/convection/centered.cpp:28:
../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/flow/convection/centered.cpp: In member function 'virtual CNumerics::ResidualType<> CCentJSTInc_Flow::ComputeResidual(const CConfig*)':
../SU2_CFD/src/numerics/flow/convection/centered.cpp:443:17: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   sc4 = sc2*sc2/4.0;
                 ^~~
In file included from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/centered.hpp:31,
                 from ../SU2_CFD/src/numerics/flow/convection/centered.cpp:28:
../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/flow/convection/../../../../include/numerics/flow/convection/../../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[385/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_NEMO_convection_lax.cpp.o
../SU2_CFD/src/numerics/NEMO/convection/lax.cpp: In member function 'virtual CNumerics::ResidualType<> CCentLax_NEMO::ComputeResidual(const CConfig*)':
../SU2_CFD/src/numerics/NEMO/convection/lax.cpp:115:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Epsilon_0 = Param_Kappa_0*sc0*su2double(nDim)/3.0;
                                                 ^~~
In file included from ../SU2_CFD/src/numerics/NEMO/convection/../../../../include/numerics/NEMO/convection/../../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/NEMO/convection/../../../../include/numerics/NEMO/convection/../../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/NEMO/convection/../../../../include/numerics/NEMO/convection/../../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/NEMO/convection/../../../../include/numerics/NEMO/convection/../../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/NEMO/convection/../../../../include/numerics/NEMO/convection/../../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/NEMO/convection/../../../../include/numerics/NEMO/convection/../CNEMONumerics.hpp:30,
                 from ../SU2_CFD/src/numerics/NEMO/convection/../../../../include/numerics/NEMO/convection/lax.hpp:30,
                 from ../SU2_CFD/src/numerics/NEMO/convection/lax.cpp:28:
../SU2_CFD/src/numerics/NEMO/convection/../../../../include/numerics/NEMO/convection/../../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/NEMO/convection/../../../../include/numerics/NEMO/convection/../../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[386/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_flow_flow_sources.cpp.o
[387/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_NEMO_CNEMONumerics.cpp.o
[388/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_NEMO_convection_ausm.cpp.o
[389/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_NEMO_convection_roe.cpp.o
[390/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_flow_flow_diffusion.cpp.o
../SU2_CFD/src/numerics/flow/flow_diffusion.cpp: In member function 'void CAvgGrad_Base::SetTauJacobian(const su2double*, su2double, su2double, su2double, const su2double*)':
../SU2_CFD/src/numerics/flow/flow_diffusion.cpp:181:97: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       tau_jacobian_i[iDim][jDim+1] = -xi*(delta[iDim][jDim] + val_normal[iDim]*val_normal[jDim]/3.0);
                                                                                                 ^~~
In file included from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/flow_diffusion.hpp:30,
                 from ../SU2_CFD/src/numerics/flow/flow_diffusion.cpp:29:
../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/flow/flow_diffusion.cpp: In member function 'void CAvgGrad_Base::SetIncTauJacobian(su2double, su2double, su2double, const su2double*)':
../SU2_CFD/src/numerics/flow/flow_diffusion.cpp:204:97: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       tau_jacobian_i[iDim][jDim+1] = -xi*(delta[iDim][jDim] + val_normal[iDim]*val_normal[jDim]/3.0);
                                                                                                 ^~~
In file included from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/flow_diffusion.hpp:30,
                 from ../SU2_CFD/src/numerics/flow/flow_diffusion.cpp:29:
../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/flow_diffusion.hpp:30:0,
                 from ../SU2_CFD/src/numerics/flow/flow_diffusion.cpp:29:
../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../CNumerics.hpp: In instantiation of 'static void CNumerics::ComputePerturbedRSM(size_t, size_t, bool, su2double, su2double, const Mat1&, Scalar, Scalar, Scalar, Mat2&) [with Mat1 = cplx**; Mat2 = cplx [3][3]; Scalar = cplx; size_t = long unsigned int; su2double = cplx]':
../SU2_CFD/src/numerics/flow/flow_diffusion.cpp:430:55:   required from here
../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../CNumerics.hpp:607:28: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     Eig_Val[0] = (c3c - 1) / 3.0;
                  ~~~~~~~~~~^~~~~
In file included from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/flow_diffusion.hpp:30,
                 from ../SU2_CFD/src/numerics/flow/flow_diffusion.cpp:29:
../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/flow/../../../include/numerics/flow/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[391/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_NEMO_convection_ausmplusup2.cpp.o
[392/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_NEMO_convection_ausmpwplus.cpp.o
[393/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_NEMO_convection_msw.cpp.o
[394/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_NEMO_NEMO_diffusion.cpp.o
[395/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/solvers_CEulerSolver.cpp.o
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:31,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/solvers/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp: In member function 'void CEulerSolver::SetNondimensionalization(CConfig*, short unsigned int)':
../SU2_CFD/src/solvers/CEulerSolver.cpp:784:56: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha         = config->GetAoA()*PI_NUMBER/180.0;
                                                        ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:785:56: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta          = config->GetAoS()*PI_NUMBER/180.0;
                                                        ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:801:61: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double b              = config->GetLength_Reynolds()/2.0; // airfoil semichord, Reynolds length is by defaul 1.0
                                                             ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp: In member function 'virtual void CEulerSolver::SetInitialCondition(CGeometry**, CSolver***, CConfig*, long unsigned int)':
../SU2_CFD/src/solvers/CEulerSolver.cpp:1377:43: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double Alpha = Alpha_Cyl*PI_NUMBER/180.0;
                                           ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:1378:42: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double Beta  = Beta_Cyl*PI_NUMBER/180.0;
                                          ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp: In static member function 'static void CEulerSolver::LowMachPrimitiveCorrection(CFluidModel*, short unsigned int, su2double*, su2double*)':
../SU2_CFD/src/solvers/CEulerSolver.cpp:1961:74: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double vel_i_corr = ( primitive_i[iDim+1] + primitive_j[iDim+1] )/2.0
                                                                          ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:1962:74: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                      + z * ( primitive_i[iDim+1] - primitive_j[iDim+1] )/2.0;
                                                                          ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:1963:74: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     su2double vel_j_corr = ( primitive_i[iDim+1] + primitive_j[iDim+1] )/2.0
                                                                          ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:1964:74: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                      + z * ( primitive_j[iDim+1] - primitive_i[iDim+1] )/2.0;
                                                                          ^~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp: In member function 'void CEulerSolver::GetPower_Properties(CGeometry*, CConfig*, short unsigned int, bool)':
../SU2_CFD/src/solvers/CEulerSolver.cpp:2487:48: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha = config->GetAoA()*PI_NUMBER/180.0;
                                                ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:2488:47: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Beta = config->GetAoS()*PI_NUMBER/180.0;
                                               ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:3089:74: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
           su2double PowerHP = Power * Ref *  config->GetVelocity_Ref() / 550.0;
                                                                          ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:3261:85: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
               cout << setprecision(1) << Power * Ref *  config->GetVelocity_Ref() / 550.0 << "." << endl;
                                                                                     ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp: In member function 'void CEulerSolver::SetActDisk_BCThrust(CGeometry*, CSolver**, CConfig*, short unsigned int, bool)':
../SU2_CFD/src/solvers/CEulerSolver.cpp:3586:146: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
             if (config->GetMach() < 0.5) Target_Power =  fabs( config->GetActDisk_PressJump(Marker_Tag, 0) / (Ref * config->GetVelocity_Ref() /  550.0));
                                                                                                                                                  ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:3587:122: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
             else Target_Power =  fabs( config->GetActDisk_PressJump(Marker_Tag, 1) / (Ref * config->GetVelocity_Ref() /  550.0));
                                                                                                                          ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:3750:54: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
                   DF_DLa = (RHS_PDelta - RHS_MDelta)/2E-6;
                                                      ^~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp: In member function 'void CEulerSolver::SetFarfield_AoA(CGeometry*, CSolver**, CConfig*, short unsigned int, bool)':
../SU2_CFD/src/solvers/CEulerSolver.cpp:4006:52: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double AoS = config->GetAoS()*PI_NUMBER/180.0;
                                                    ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp: In member function 'virtual bool CEulerSolver::FixedCL_Convergence(CConfig*, bool)':
../SU2_CFD/src/solvers/CEulerSolver.cpp:4081:68: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       if (fabs(TotalCoeff.CL-Target_CL) < (config->GetCauchy_Eps()/2)) {
                                                                    ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:4104:70: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         if (fabs(TotalCoeff.CL-Target_CL) > (config->GetCauchy_Eps()/2)) {
                                                                      ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp:4115:68: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       if (fabs(TotalCoeff.CL-Target_CL) > (config->GetCauchy_Eps()/2)) {
                                                                    ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp: In member function 'virtual void CEulerSolver::BC_ActDisk(CGeometry*, CSolver**, CNumerics*, CNumerics*, CConfig*, short unsigned int, bool)':
../SU2_CFD/src/solvers/CEulerSolver.cpp:7894:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         Vel_normal_outlet_ = (1.0-SecondaryFlow/100.0)*(Rho_inlet*Vel_normal_inlet_)/Rho_outlet;
                                                 ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp: In member function 'virtual void CEulerSolver::SetFreeStream_TurboSolution(CConfig*)':
../SU2_CFD/src/solvers/CEulerSolver.cpp:8384:59: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   su2double Alpha            = config->GetAoA()*PI_NUMBER/180.0;
                                                           ^~~~~
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/CEulerSolver.cpp: In member function 'void CEulerSolver::MixedOut_Average(CConfig*, su2double, const su2double*, const su2double*, su2double&, su2double&)':
../SU2_CFD/src/solvers/CEulerSolver.cpp:9221:80: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     f = val_Averaged_Flux[nDim+1] - val_Averaged_Flux[0]*(enthalpy_mix + velsq/2);
                                                                                ^
In file included from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/omp_structure.hpp:43,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CFVMFlowSolverBase.hpp:29,
                 from ../SU2_CFD/src/solvers/../../include/solvers/CEulerSolver.hpp:30,
                 from ../SU2_CFD/src/solvers/CEulerSolver.cpp:28:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h: At global scope:
../SU2_CFD/src/solvers/../../include/solvers/../../../Common/include/parallelization/../complexify.h:91:15: warning: inline function 'cplx cplx::operator*(const long int&) const' used but never defined
   inline cplx operator*(const long int&) const; // BJB
               ^~~~~~~~
[396/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_NEMO_NEMO_sources.cpp.o
[397/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_turbulent_turb_convection.cpp.o
[398/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_continuous_adjoint_adj_sources.cpp.o
[399/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_turbulent_turb_diffusion.cpp.o
[400/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_continuous_adjoint_adj_diffusion.cpp.o
[401/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_elasticity_CFEAElasticity.cpp.o
[402/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_elasticity_CFEALinearElasticity.cpp.o
../SU2_CFD/src/numerics/elasticity/CFEALinearElasticity.cpp: In member function 'virtual su2double CFEALinearElasticity::Compute_Averaged_NodalStress(CElement*, const CConfig*)':
../SU2_CFD/src/numerics/elasticity/CFEALinearElasticity.cpp:325:41: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       avgStress[iVar] += Stress[iVar] / nGauss;
                                         ^~~~~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEALinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEALinearElasticity.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEALinearElasticity.hpp:30:0,
                 from ../SU2_CFD/src/numerics/elasticity/CFEALinearElasticity.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp: In instantiation of 'static su2double CFEAElasticity::VonMisesStress(short unsigned int, const T&) [with T = cplx [6]; su2double = cplx]':
../SU2_CFD/src/numerics/elasticity/CFEALinearElasticity.cpp:351:49:   required from here
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:187:44: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double S1, S2; S1 = S2 = (Sxx+Syy)/2;
                                   ~~~~~~~~~^~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEALinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEALinearElasticity.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEALinearElasticity.hpp:30:0,
                 from ../SU2_CFD/src/numerics/elasticity/CFEALinearElasticity.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:188:44: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double tauMax = sqrt(pow((Sxx-Syy)/2, 2) + pow(Sxy,2));
                                   ~~~~~~~~~^~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEALinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEALinearElasticity.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[403/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_elasticity_nonlinear_models.cpp.o
../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp: In member function 'virtual void CFEM_Knowles_NearInc::Compute_Stress_Tensor(CElement*, const CConfig*)':
../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:194:68: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   trbbar = (b_Mat_Iso[0][0] + b_Mat_Iso[1][1] + b_Mat_Iso[2][2]) / 3.0;
                                                                    ^~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/nonlinear_models.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp: In member function 'virtual void CFEM_IdealDE::Compute_Constitutive_Matrix(CElement*, const CConfig*)':
../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:303:40: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     D_Mat[0][2] = Eg23*b_Mat_Iso[0][1]/2.0;
                                        ^~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/nonlinear_models.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:304:40: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     D_Mat[2][0] = Eg23*b_Mat_Iso[0][1]/2.0;
                                        ^~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/nonlinear_models.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:306:40: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     D_Mat[1][2] = Eg23*b_Mat_Iso[0][1]/2.0;
                                        ^~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/nonlinear_models.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:307:40: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     D_Mat[2][1] = Eg23*b_Mat_Iso[0][1]/2.0;
                                        ^~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/nonlinear_models.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:309:56: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     D_Mat[2][2] = Eg*(b_Mat_Iso[0][0]+b_Mat_Iso[1][1])/2.0;
                                                        ^~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/nonlinear_models.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp: In member function 'virtual void CFEM_IdealDE::Compute_Stress_Tensor(CElement*, const CConfig*)':
../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:330:68: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   trbbar = (b_Mat_Iso[0][0] + b_Mat_Iso[1][1] + b_Mat_Iso[2][2]) / 3.0;
                                                                    ^~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/nonlinear_models.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:334:21: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Eg23 = 2.0 * Eg / 3.0;
                     ^~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/nonlinear_models.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/nonlinear_models.cpp:28:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[404/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/.._include_numerics_simd_CNumericsSIMD.cpp.o
FAILED: SU2_CFD/src/libSU2core.a.p/.._include_numerics_simd_CNumericsSIMD.cpp.o 
mpicxx -ISU2_CFD/src/libSU2core.a.p -ISU2_CFD/src -I../SU2_CFD/src -I../externals/CLI11 -I../externals/cgns/adf -Iexternals/cgns -I../externals/cgns -I../externals/metis/include -I../externals/metis/GKlib -I../externals/metis/libmetis -I../externals/parmetis/include -I../externals/parmetis/libparmetis -Iexternals/tecio -I../externals/tecio -Iexternals/tecio/teciompisrc -I../externals/tecio/teciompisrc -ICommon/src -I../Common/src -fdiagnostics-color=always -pipe -D_FILE_OFFSET_BITS=64 -std=c++11 -O3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -isystem /home/bburke38/anaconda3/include -D_FORTIFY_SOURCE=2 -O2 -isystem /home/bburke38/anaconda3/include -fPIC -Wno-empty-body -Wno-unused-parameter -Wno-deprecated-declarations -DCOMPLEX_STEP -DHAVE_CGNS -DNDEBUG -DHAVE_MPI -DHAVE_METIS -DHAVE_PARMETIS -DHAVE_TECIO -DTECIOMPI -MD -MQ SU2_CFD/src/libSU2core.a.p/.._include_numerics_simd_CNumericsSIMD.cpp.o -MF 'SU2_CFD/src/libSU2core.a.p/.._include_numerics_simd_CNumericsSIMD.cpp.o.d' -o SU2_CFD/src/libSU2core.a.p/.._include_numerics_simd_CNumericsSIMD.cpp.o -c ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTmatScheme<CNoViscousFlux<3> >; Base = CNoViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTkeScheme<CNoViscousFlux<3> >; Base = CNoViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTScheme<CNoViscousFlux<3> >; Base = CNoViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CLaxScheme<CNoViscousFlux<3> >; Base = CNoViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTmatScheme<CGeneralCompressibleViscousFlux<3> >; Base = CGeneralCompressibleViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTkeScheme<CGeneralCompressibleViscousFlux<3> >; Base = CGeneralCompressibleViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTScheme<CGeneralCompressibleViscousFlux<3> >; Base = CGeneralCompressibleViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CLaxScheme<CGeneralCompressibleViscousFlux<3> >; Base = CGeneralCompressibleViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTmatScheme<CCompressibleViscousFlux<3> >; Base = CCompressibleViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTkeScheme<CCompressibleViscousFlux<3> >; Base = CCompressibleViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTScheme<CCompressibleViscousFlux<3> >; Base = CCompressibleViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CLaxScheme<CCompressibleViscousFlux<3> >; Base = CCompressibleViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:0:
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp: In instantiation of 'void CRoeBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CRoeScheme<CNoViscousFlux<3> >; Base = CNoViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:138:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0, projVel = roeAvg.projVel;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp: In instantiation of 'void CRoeBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CRoeScheme<CCompressibleViscousFlux<3> >; Base = CCompressibleViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:138:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTmatScheme<CNoViscousFlux<2> >; Base = CNoViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTkeScheme<CNoViscousFlux<2> >; Base = CNoViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTScheme<CNoViscousFlux<2> >; Base = CNoViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CLaxScheme<CNoViscousFlux<2> >; Base = CNoViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTmatScheme<CGeneralCompressibleViscousFlux<2> >; Base = CGeneralCompressibleViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTkeScheme<CGeneralCompressibleViscousFlux<2> >; Base = CGeneralCompressibleViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTScheme<CGeneralCompressibleViscousFlux<2> >; Base = CGeneralCompressibleViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CLaxScheme<CGeneralCompressibleViscousFlux<2> >; Base = CGeneralCompressibleViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTmatScheme<CCompressibleViscousFlux<2> >; Base = CCompressibleViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTkeScheme<CCompressibleViscousFlux<2> >; Base = CCompressibleViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTScheme<CCompressibleViscousFlux<2> >; Base = CCompressibleViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp: In instantiation of 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CLaxScheme<CCompressibleViscousFlux<2> >; Base = CCompressibleViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:141:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_i = inviscidProjJac(gamma, V.i.velocity(), U.i.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: error: no matching function for call to 'inviscidProjJac(const su2double&, const Double*, Double, const C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>&, double)'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note: candidate: template<long unsigned int nDim, class RandomAccessIterator> MatrixDbl<(nDim + 2)> inviscidProjJac(Double, RandomAccessIterator, Double, VectorDbl<nDim>&, Double)
 FORCEINLINE MatrixDbl<nDim+2> inviscidProjJac(Double gamma, RandomAccessIterator velocity,
                               ^~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:286:31: note:   template argument deduction/substitution failed:
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:32:0:
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:142:30: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       jac_j = inviscidProjJac(gamma, V.j.velocity(), U.j.energy(), normal, 0.5);
               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:147:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0;
            ^~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:0:
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp: In instantiation of 'void CRoeBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CRoeScheme<CNoViscousFlux<2> >; Base = CNoViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:138:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
     Double projGridVel = 0.0, projVel = roeAvg.projVel;
            ^~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp: In instantiation of 'void CRoeBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CRoeScheme<CCompressibleViscousFlux<2> >; Base = CCompressibleViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]':
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:138:12: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:33:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp: In instantiation of 'CPair<ReconVarType> reconstructPrimitives(Int, Int, bool, ENUM_LIMITER, const CPair<PrimVarType>&, VectorDbl<nDim>&, const VariableType&) [with ReconVarType = CCompressiblePrimitives<3, 7>; PrimVarType = CCompressiblePrimitives<3, 7>; long unsigned int nDim = 3; VariableType = CEulerVariable; Int = simd::Array<long unsigned int, 2>; VectorDbl<nDim> = C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>]':
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:118:80:   required from 'void CRoeBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CRoeScheme<CNoViscousFlux<3> >; Base = CNoViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]'
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:123:21: error: no matching function for call to 'musclUnlimited(Int&, VectorDbl<3>&, double, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<7>&)'
       musclUnlimited(iPoint, vector_ij, 0.5, gradients, V.i.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Gradient_t> void musclUnlimited(Int, VectorDbl<nDim>&, Double, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclUnlimited(Int iPoint,
                  ^~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:123:21: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclUnlimited(iPoint, vector_ij, 0.5, gradients, V.i.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:124:21: error: no matching function for call to 'musclUnlimited(Int&, VectorDbl<3>&, double, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<7>&)'
       musclUnlimited(jPoint, vector_ij,-0.5, gradients, V.j.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Gradient_t> void musclUnlimited(Int, VectorDbl<nDim>&, Double, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclUnlimited(Int iPoint,
                  ^~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:124:21: note:   cannot convert '-5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclUnlimited(jPoint, vector_ij,-0.5, gradients, V.j.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:130:24: error: no matching function for call to 'musclPointLimited(Int&, VectorDbl<3>&, double, const C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0>&, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<7>&)'
       musclPointLimited(iPoint, vector_ij, 0.5, limiters, gradients, V.i.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Limiter_t, class Gradient_t> void musclPointLimited(Int, VectorDbl<nDim>&, Double, const Limiter_t&, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclPointLimited(Int iPoint,
                  ^~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:130:24: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclPointLimited(iPoint, vector_ij, 0.5, limiters, gradients, V.i.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:131:24: error: no matching function for call to 'musclPointLimited(Int&, VectorDbl<3>&, double, const C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0>&, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<7>&)'
       musclPointLimited(jPoint, vector_ij,-0.5, limiters, gradients, V.j.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Limiter_t, class Gradient_t> void musclPointLimited(Int, VectorDbl<nDim>&, Double, const Limiter_t&, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclPointLimited(Int iPoint,
                  ^~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:131:24: note:   cannot convert '-5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclPointLimited(jPoint, vector_ij,-0.5, limiters, gradients, V.j.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp: In instantiation of 'CPair<ReconVarType> reconstructPrimitives(Int, Int, bool, ENUM_LIMITER, const CPair<PrimVarType>&, VectorDbl<nDim>&, const VariableType&) [with ReconVarType = CCompressiblePrimitives<3, 7>; PrimVarType = CCompressiblePrimitives<3, 10>; long unsigned int nDim = 3; VariableType = CEulerVariable; Int = simd::Array<long unsigned int, 2>; VectorDbl<nDim> = C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>]':
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:118:80:   required from 'void CRoeBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CRoeScheme<CCompressibleViscousFlux<3> >; Base = CCompressibleViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]'
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:123:21: error: no matching function for call to 'musclUnlimited(Int&, VectorDbl<3>&, double, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<7>&)'
       musclUnlimited(iPoint, vector_ij, 0.5, gradients, V.i.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Gradient_t> void musclUnlimited(Int, VectorDbl<nDim>&, Double, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclUnlimited(Int iPoint,
                  ^~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:123:21: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclUnlimited(iPoint, vector_ij, 0.5, gradients, V.i.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:124:21: error: no matching function for call to 'musclUnlimited(Int&, VectorDbl<3>&, double, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<7>&)'
       musclUnlimited(jPoint, vector_ij,-0.5, gradients, V.j.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Gradient_t> void musclUnlimited(Int, VectorDbl<nDim>&, Double, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclUnlimited(Int iPoint,
                  ^~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:124:21: note:   cannot convert '-5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclUnlimited(jPoint, vector_ij,-0.5, gradients, V.j.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:130:24: error: no matching function for call to 'musclPointLimited(Int&, VectorDbl<3>&, double, const C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0>&, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<7>&)'
       musclPointLimited(iPoint, vector_ij, 0.5, limiters, gradients, V.i.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Limiter_t, class Gradient_t> void musclPointLimited(Int, VectorDbl<nDim>&, Double, const Limiter_t&, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclPointLimited(Int iPoint,
                  ^~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:130:24: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclPointLimited(iPoint, vector_ij, 0.5, limiters, gradients, V.i.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:131:24: error: no matching function for call to 'musclPointLimited(Int&, VectorDbl<3>&, double, const C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0>&, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<7>&)'
       musclPointLimited(jPoint, vector_ij,-0.5, limiters, gradients, V.j.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Limiter_t, class Gradient_t> void musclPointLimited(Int, VectorDbl<nDim>&, Double, const Limiter_t&, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclPointLimited(Int iPoint,
                  ^~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:131:24: note:   cannot convert '-5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclPointLimited(jPoint, vector_ij,-0.5, limiters, gradients, V.j.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp: In instantiation of 'CPair<ReconVarType> reconstructPrimitives(Int, Int, bool, ENUM_LIMITER, const CPair<PrimVarType>&, VectorDbl<nDim>&, const VariableType&) [with ReconVarType = CCompressiblePrimitives<2, 6>; PrimVarType = CCompressiblePrimitives<2, 6>; long unsigned int nDim = 2; VariableType = CEulerVariable; Int = simd::Array<long unsigned int, 2>; VectorDbl<nDim> = C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>]':
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:118:80:   required from 'void CRoeBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CRoeScheme<CNoViscousFlux<2> >; Base = CNoViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]'
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:123:21: error: no matching function for call to 'musclUnlimited(Int&, VectorDbl<2>&, double, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<6>&)'
       musclUnlimited(iPoint, vector_ij, 0.5, gradients, V.i.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Gradient_t> void musclUnlimited(Int, VectorDbl<nDim>&, Double, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclUnlimited(Int iPoint,
                  ^~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:123:21: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclUnlimited(iPoint, vector_ij, 0.5, gradients, V.i.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:124:21: error: no matching function for call to 'musclUnlimited(Int&, VectorDbl<2>&, double, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<6>&)'
       musclUnlimited(jPoint, vector_ij,-0.5, gradients, V.j.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Gradient_t> void musclUnlimited(Int, VectorDbl<nDim>&, Double, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclUnlimited(Int iPoint,
                  ^~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:124:21: note:   cannot convert '-5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclUnlimited(jPoint, vector_ij,-0.5, gradients, V.j.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:130:24: error: no matching function for call to 'musclPointLimited(Int&, VectorDbl<2>&, double, const C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0>&, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<6>&)'
       musclPointLimited(iPoint, vector_ij, 0.5, limiters, gradients, V.i.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Limiter_t, class Gradient_t> void musclPointLimited(Int, VectorDbl<nDim>&, Double, const Limiter_t&, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclPointLimited(Int iPoint,
                  ^~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:130:24: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclPointLimited(iPoint, vector_ij, 0.5, limiters, gradients, V.i.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:131:24: error: no matching function for call to 'musclPointLimited(Int&, VectorDbl<2>&, double, const C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0>&, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<6>&)'
       musclPointLimited(jPoint, vector_ij,-0.5, limiters, gradients, V.j.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Limiter_t, class Gradient_t> void musclPointLimited(Int, VectorDbl<nDim>&, Double, const Limiter_t&, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclPointLimited(Int iPoint,
                  ^~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:131:24: note:   cannot convert '-5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclPointLimited(jPoint, vector_ij,-0.5, limiters, gradients, V.j.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp: In instantiation of 'CPair<ReconVarType> reconstructPrimitives(Int, Int, bool, ENUM_LIMITER, const CPair<PrimVarType>&, VectorDbl<nDim>&, const VariableType&) [with ReconVarType = CCompressiblePrimitives<2, 6>; PrimVarType = CCompressiblePrimitives<2, 9>; long unsigned int nDim = 2; VariableType = CEulerVariable; Int = simd::Array<long unsigned int, 2>; VectorDbl<nDim> = C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>]':
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:118:80:   required from 'void CRoeBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CRoeScheme<CCompressibleViscousFlux<2> >; Base = CCompressibleViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]'
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:123:21: error: no matching function for call to 'musclUnlimited(Int&, VectorDbl<2>&, double, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<6>&)'
       musclUnlimited(iPoint, vector_ij, 0.5, gradients, V.i.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Gradient_t> void musclUnlimited(Int, VectorDbl<nDim>&, Double, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclUnlimited(Int iPoint,
                  ^~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:123:21: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclUnlimited(iPoint, vector_ij, 0.5, gradients, V.i.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:124:21: error: no matching function for call to 'musclUnlimited(Int&, VectorDbl<2>&, double, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<6>&)'
       musclUnlimited(jPoint, vector_ij,-0.5, gradients, V.j.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Gradient_t> void musclUnlimited(Int, VectorDbl<nDim>&, Double, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclUnlimited(Int iPoint,
                  ^~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:39:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:124:21: note:   cannot convert '-5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclUnlimited(jPoint, vector_ij,-0.5, gradients, V.j.all);
       ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:130:24: error: no matching function for call to 'musclPointLimited(Int&, VectorDbl<2>&, double, const C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0>&, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<6>&)'
       musclPointLimited(iPoint, vector_ij, 0.5, limiters, gradients, V.i.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Limiter_t, class Gradient_t> void musclPointLimited(Int, VectorDbl<nDim>&, Double, const Limiter_t&, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclPointLimited(Int iPoint,
                  ^~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:130:24: note:   cannot convert '5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclPointLimited(iPoint, vector_ij, 0.5, limiters, gradients, V.i.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:131:24: error: no matching function for call to 'musclPointLimited(Int&, VectorDbl<2>&, double, const C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0>&, const C3DContainerDecorator<C2DContainer<long unsigned int, cplx, (StorageType)0, 64, 0, 0> >&, VectorDbl<6>&)'
       musclPointLimited(jPoint, vector_ij,-0.5, limiters, gradients, V.j.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note: candidate: template<long unsigned int nVar, long unsigned int nDim, class Limiter_t, class Gradient_t> void musclPointLimited(Int, VectorDbl<nDim>&, Double, const Limiter_t&, const Gradient_t&, VectorDbl<nDim>&)
 FORCEINLINE void musclPointLimited(Int iPoint,
                  ^~~~~~~~~~~~~~~~~
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:54:18: note:   template argument deduction/substitution failed:
../SU2_CFD/include/numerics_simd/flow/convection/common.hpp:131:24: note:   cannot convert '-5.0e-1' (type 'double') to type 'Double {aka simd::Array<cplx>}'
       musclPointLimited(jPoint, vector_ij,-0.5, limiters, gradients, V.j.all);
       ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:31:0,
                 from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:
../SU2_CFD/include/numerics_simd/flow/convection/../../util.hpp: In instantiation of 'Double squaredNorm(ForwardIterator) [with long unsigned int nDim = 3; ForwardIterator = const simd::Array<cplx>*; Double = simd::Array<cplx>]':
../SU2_CFD/include/numerics_simd/flow/convection/../../util.hpp:109:27:   required from 'Double squaredNorm(VectorDbl<nDim>&) [with long unsigned int nDim = 3; Double = simd::Array<cplx>; VectorDbl<nDim> = C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>]'
../SU2_CFD/include/numerics_simd/flow/convection/../../util.hpp:134:81:   required from 'Double norm(VectorDbl<nDim>&) [with long unsigned int nDim = 3; Double = simd::Array<cplx>; VectorDbl<nDim> = C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 3, 1>]'
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:104:27:   required from 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTmatScheme<CNoViscousFlux<3> >; Base = CNoViscousFlux<3>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]'
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/../../util.hpp:97:10: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
   Double sum = 0.0;
          ^~~
../SU2_CFD/include/numerics_simd/flow/convection/../../util.hpp: In instantiation of 'Double squaredNorm(ForwardIterator) [with long unsigned int nDim = 2; ForwardIterator = const simd::Array<cplx>*; Double = simd::Array<cplx>]':
../SU2_CFD/include/numerics_simd/flow/convection/../../util.hpp:109:27:   required from 'Double squaredNorm(VectorDbl<nDim>&) [with long unsigned int nDim = 2; Double = simd::Array<cplx>; VectorDbl<nDim> = C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>]'
../SU2_CFD/include/numerics_simd/flow/convection/../../util.hpp:134:81:   required from 'Double norm(VectorDbl<nDim>&) [with long unsigned int nDim = 2; Double = simd::Array<cplx>; VectorDbl<nDim> = C2DContainer<long unsigned int, simd::Array<cplx>, (StorageType)1, 32, 2, 1>]'
../SU2_CFD/include/numerics_simd/flow/convection/centered.hpp:104:27:   required from 'void CCenteredBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CJSTmatScheme<CNoViscousFlux<2> >; Base = CNoViscousFlux<2>; Int = simd::Array<long unsigned int, 2>; Double = simd::Array<cplx>; SparseMatrixType = CSysMatrix<double>]'
../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:140:1:   required from here
../SU2_CFD/include/numerics_simd/flow/convection/../../util.hpp:97:10: error: conversion from 'double' to non-scalar type 'Double {aka simd::Array<cplx>}' requested
In file included from ../SU2_CFD/include/numerics_simd/CNumericsSIMD.cpp:31:0:
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp: In member function 'void CRoeBase<Derived, Base>::ComputeFlux(Int, const CConfig&, const CGeometry&, const CVariable&, UpdateType, Double, CSysVector<cplx>&, SparseMatrixType&) const [with Derived = CRoeScheme<CCompressibleViscousFlux<2> >; Base = CCompressibleViscousFlux<2>]':
../SU2_CFD/include/numerics_simd/flow/convection/roe.hpp:82:8: note: The ABI for passing parameters with 32-byte alignment has changed in GCC 4.6
   void ComputeFlux(Int iEdge,
        ^~~~~~~~~~~
[405/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_turbulent_turb_sources.cpp.o
../SU2_CFD/src/numerics/turbulent/turb_sources.cpp: In member function 'virtual CNumerics::ResidualType<> CSourcePieceWise_TurbSA::ComputeResidual(const CConfig*)':
../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:148:33: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double re_theta = re_v/2.193;
                                 ^~~~~
In file included from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/turb_sources.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:29:
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/turbulent/turb_sources.cpp: In member function 'virtual CNumerics::ResidualType<> CSourcePieceWise_TurbSA_E::ComputeResidual(const CConfig*)':
../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:420:23: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     r=tanh(r)/tanh(1.0);
                       ^
In file included from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/turb_sources.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:29:
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:451:42: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     dr=(1-pow(tanh(r),2.0))*(dr)/tanh(1.0);
                                          ^
In file included from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/turb_sources.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:29:
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/turbulent/turb_sources.cpp: In member function 'virtual CNumerics::ResidualType<> CSourcePieceWise_TurbSA_E_COMP::ComputeResidual(const CConfig*)':
../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:546:23: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     r=tanh(r)/tanh(1.0);
                       ^
In file included from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/turb_sources.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:29:
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:588:42: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     dr=(1-pow(tanh(r),2.0))*(dr)/tanh(1.0);
                                          ^
In file included from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/turb_sources.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:29:
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/turb_sources.hpp:31:0,
                 from ../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:29:
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../CNumerics.hpp: In instantiation of 'static void CNumerics::ComputePerturbedRSM(size_t, size_t, bool, su2double, su2double, const Mat1&, Scalar, Scalar, Scalar, Mat2&) [with Mat1 = CMatrixView<const cplx>; Mat2 = cplx [3][3]; Scalar = cplx; size_t = long unsigned int; su2double = cplx]':
../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:843:56:   required from here
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../CNumerics.hpp:607:28: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     Eig_Val[0] = (c3c - 1) / 3.0;
                  ~~~~~~~~~~^~~~~
In file included from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/turb_sources.hpp:31,
                 from ../SU2_CFD/src/numerics/turbulent/turb_sources.cpp:29:
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/turbulent/../../../include/numerics/turbulent/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[406/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_elasticity_CFEANonlinearElasticity.cpp.o
../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp: In constructor 'CFEANonlinearElasticity::CFEANonlinearElasticity(short unsigned int, short unsigned int, const CConfig*)':
../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:66:12: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   C10 = Mu/2.0;
            ^~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:29:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp: In member function 'virtual su2double CFEANonlinearElasticity::Compute_Averaged_NodalStress(CElement*, const CConfig*)':
../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:853:43: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     avgStress[0] += Stress_Tensor[0][0] / nGauss;
                                           ^~~~~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:29:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:854:43: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     avgStress[1] += Stress_Tensor[1][1] / nGauss;
                                           ^~~~~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:29:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:855:43: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     avgStress[2] += Stress_Tensor[0][1] / nGauss;
                                           ^~~~~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:29:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:857:45: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       avgStress[3] += Stress_Tensor[2][2] / nGauss;
                                             ^~~~~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:29:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:858:45: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       avgStress[4] += Stress_Tensor[0][2] / nGauss;
                                             ^~~~~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:29:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:859:45: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       avgStress[5] += Stress_Tensor[1][2] / nGauss;
                                             ^~~~~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:29:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30:0,
                 from ../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:29:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp: In instantiation of 'static su2double CFEAElasticity::VonMisesStress(short unsigned int, const T&) [with T = cplx [6]; su2double = cplx]':
../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:893:49:   required from here
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:187:44: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double S1, S2; S1 = S2 = (Sxx+Syy)/2;
                                   ~~~~~~~~~^~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:29:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30:0,
                 from ../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:29:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:188:44: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double tauMax = sqrt(pow((Sxx-Syy)/2, 2) + pow(Sxy,2));
                                   ~~~~~~~~~^~
In file included from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEAElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/CFEANonlinearElasticity.hpp:30,
                 from ../SU2_CFD/src/numerics/elasticity/CFEANonlinearElasticity.cpp:29:
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/numerics/elasticity/../../../include/numerics/elasticity/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[407/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/numerics_continuous_adjoint_adj_convection.cpp.o
../SU2_CFD/src/numerics/continuous_adjoint/adj_convection.cpp: In member function 'virtual void CCentLax_AdjFlow::ComputeResidual(su2double*, su2double*, su2double*, su2double*, su2double**, su2double**, su2double**, su2double**, CConfig*)':
../SU2_CFD/src/numerics/continuous_adjoint/adj_convection.cpp:217:49: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   Epsilon_0 = Param_Kappa_0*sc2*su2double(nDim)/3.0;
                                                 ^~~
In file included from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/adj_convection.hpp:31,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/adj_convection.cpp:28:
../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/numerics/continuous_adjoint/adj_convection.cpp: In member function 'virtual void CCentJST_AdjFlow::ComputeResidual(su2double*, su2double*, su2double*, su2double*, su2double**, su2double**, su2double**, su2double**, CConfig*)':
../SU2_CFD/src/numerics/continuous_adjoint/adj_convection.cpp:437:17: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   sc4 = sc2*sc2/4.0;
                 ^~~
In file included from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/CConfig.hpp:31,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../CNumerics.hpp:36,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/adj_convection.hpp:31,
                 from ../SU2_CFD/src/numerics/continuous_adjoint/adj_convection.cpp:28:
../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/numerics/continuous_adjoint/../../../include/numerics/continuous_adjoint/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[408/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/interfaces_cfd_CConservativeVarsInterface.cpp.o
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cfd/CConservativeVarsInterface.cpp:32:
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/CConservativeVarsInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/CConservativeVarsInterface.cpp:29:
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cfd/CConservativeVarsInterface.cpp:32:
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/CConservativeVarsInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/CConservativeVarsInterface.cpp:29:
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cfd/CConservativeVarsInterface.cpp:32:
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/CConservativeVarsInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/CConservativeVarsInterface.cpp:29:
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[409/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/interfaces_CInterface.cpp.o
In file included from ../SU2_CFD/src/interfaces/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/CInterface.cpp:32:
../SU2_CFD/src/interfaces/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/../../include/interfaces/CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/CInterface.cpp:28:
../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/CInterface.cpp:32:
../SU2_CFD/src/interfaces/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/../../include/interfaces/CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/CInterface.cpp:28:
../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/CInterface.cpp:32:
../SU2_CFD/src/interfaces/../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/../../include/interfaces/CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/CInterface.cpp:28:
../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/../../include/interfaces/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[410/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/interfaces_cht_CConjugateHeatInterface.cpp.o
In file included from ../SU2_CFD/src/interfaces/cht/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cht/CConjugateHeatInterface.cpp:33:
../SU2_CFD/src/interfaces/cht/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cht/../../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/CConjugateHeatInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cht/CConjugateHeatInterface.cpp:29:
../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/cht/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cht/CConjugateHeatInterface.cpp:33:
../SU2_CFD/src/interfaces/cht/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cht/../../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/CConjugateHeatInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cht/CConjugateHeatInterface.cpp:29:
../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/cht/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cht/CConjugateHeatInterface.cpp:33:
../SU2_CFD/src/interfaces/cht/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cht/../../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/CConjugateHeatInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cht/CConjugateHeatInterface.cpp:29:
../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cht/../../../include/interfaces/cht/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[411/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/interfaces_cfd_CMixingPlaneInterface.cpp.o
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cfd/CMixingPlaneInterface.cpp:32:
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/CMixingPlaneInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/CMixingPlaneInterface.cpp:29:
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cfd/CMixingPlaneInterface.cpp:32:
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/CMixingPlaneInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/CMixingPlaneInterface.cpp:29:
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cfd/CMixingPlaneInterface.cpp:32:
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/CMixingPlaneInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/CMixingPlaneInterface.cpp:29:
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[412/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/interfaces_fsi_CDisplacementsInterface.cpp.o
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/fsi/CDisplacementsInterface.cpp:31:
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CDisplacementsInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/CDisplacementsInterface.cpp:28:
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/fsi/CDisplacementsInterface.cpp:31:
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CDisplacementsInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/CDisplacementsInterface.cpp:28:
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/fsi/CDisplacementsInterface.cpp:31:
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CDisplacementsInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/CDisplacementsInterface.cpp:28:
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[413/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/interfaces_cfd_CSlidingInterface.cpp.o
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cfd/CSlidingInterface.cpp:32:
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/CSlidingInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/CSlidingInterface.cpp:29:
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cfd/CSlidingInterface.cpp:32:
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/CSlidingInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/CSlidingInterface.cpp:29:
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/cfd/CSlidingInterface.cpp:32:
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/cfd/../../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/CSlidingInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/cfd/CSlidingInterface.cpp:29:
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/cfd/../../../include/interfaces/cfd/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[414/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/interfaces_fsi_CFlowTractionInterface.cpp.o
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/fsi/CFlowTractionInterface.cpp:32:
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CFlowTractionInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/CFlowTractionInterface.cpp:29:
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/fsi/CFlowTractionInterface.cpp:32:
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CFlowTractionInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/CFlowTractionInterface.cpp:29:
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/fsi/CFlowTractionInterface.cpp:32:
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CFlowTractionInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/CFlowTractionInterface.cpp:29:
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/interfaces/fsi/CFlowTractionInterface.cpp: In member function 'void CFlowTractionInterface::ComputeVertexAreas(const CConfig*, CGeometry*, CSolver*)':
../SU2_CFD/src/interfaces/fsi/CFlowTractionInterface.cpp:106:65: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       su2double area = GeometryToolbox::Norm(MAXNDIM, normal) / nNode;
                                                                 ^~~~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CFlowTractionInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/CFlowTractionInterface.cpp:29:
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:349:13: note: candidate 1: cplx operator/(const cplx&, const unsigned int&)
 inline cplx operator/(const cplx& z, const unsigned int& i)
             ^~~~~~~~
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[415/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/interfaces_fsi_CDiscAdjFlowTractionInterface.cpp.o
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/fsi/CDiscAdjFlowTractionInterface.cpp:32:
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CFlowTractionInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CDiscAdjFlowTractionInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/CDiscAdjFlowTractionInterface.cpp:29:
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/fsi/CDiscAdjFlowTractionInterface.cpp:32:
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CFlowTractionInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CDiscAdjFlowTractionInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/CDiscAdjFlowTractionInterface.cpp:29:
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/interfaces/fsi/CDiscAdjFlowTractionInterface.cpp:32:
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/interfaces/fsi/../../../include/solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../CInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CFlowTractionInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/CDiscAdjFlowTractionInterface.hpp:31,
                 from ../SU2_CFD/src/interfaces/fsi/CDiscAdjFlowTractionInterface.cpp:29:
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/interfaces/fsi/../../../include/interfaces/fsi/../../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[416/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/drivers_CMultizoneDriver.cpp.o
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CMultizoneDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CMultizoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CMultizoneDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CMultizoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CMultizoneDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CMultizoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CMultizoneDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CMultizoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CMultizoneDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CMultizoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CMultizoneDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CMultizoneDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
[417/451] Compiling C++ object SU2_CFD/src/libSU2core.a.p/drivers_CDriver.cpp.o
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_2D(su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:265:46: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22)/3.0;
                                              ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CWALEModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:322:53: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double thirdTrace = (Sd11 + Sd22 + Sd33)/3.0;
                                                     ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.hpp:787:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/CSolver.hpp:45,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../integration/CIntegration.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:33,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl: In member function 'virtual su2double CVremanModel::ComputeEddyViscosity_3D(su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double, su2double)':
../SU2_CFD/src/drivers/../../include/drivers/../integration/../solvers/../sgs_model.inl:443:55: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
   const su2double tmp = (alpha11 + alpha22 + alpha33)/3.0;
                                                       ^~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/drivers/CDriver.cpp: In member function 'void CDriver::Postprocessing()':
../SU2_CFD/src/drivers/CDriver.cpp:509:87: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     cout << setw(25) << "Wall-clock time (hrs):" << setw(12) << (TotalTime)/(60.0*60.0) << " | ";
                                                                                       ^
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/drivers/CDriver.cpp:510:77: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     cout << setw(20) << "Core-hrs:" << setw(12) << size*TotalTime/(60.0*60.0) << endl;
                                                                             ^
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:329:13: note: candidate 1: cplx cplx::operator/(const double&) const
 inline cplx cplx::operator/(const double& r) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/drivers/CDriver.cpp:513:75: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     cout << setw(25) << "Points/core:" << setw(12) << 1.0e6*MpointsDomain/size << " | ";
                                                                           ^~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/drivers/CDriver.cpp:514:91: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
     cout << setw(20) << "Ghost points/core:" << setw(12) << 1.0e6*(Mpoints-MpointsDomain)/size << endl;
                                                                                           ^~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/drivers/CDriver.cpp:539:80: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
         cout << setw(20)<< "MB/s/core:" << setw(12)<< BandwidthSum/OutputCount/size << endl;
                                                                                ^~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/drivers/CDriver.cpp: In member function 'void CHBDriver::ComputeHB_Operator()':
../SU2_CFD/src/drivers/CDriver.cpp:3601:65: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       Einv[i][k] = complex<su2double>(cos(Omega_HB[k]*(i*Period/nInstHB))) + J*complex<su2double>(sin(Omega_HB[k]*(i*Period/nInstHB)));
                                                                 ^~~~~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/drivers/CDriver.cpp:3601:125: warning: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second:
       Einv[i][k] = complex<su2double>(cos(Omega_HB[k]*(i*Period/nInstHB))) + J*complex<su2double>(sin(Omega_HB[k]*(i*Period/nInstHB)));
                                                                                                                             ^~~~~~~
In file included from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../code_config.hpp:101:0,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/datatype_structure.hpp:34,
                 from ../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/mpi_structure.hpp:37,
                 from ../SU2_CFD/src/drivers/../../include/drivers/CDriver.hpp:31,
                 from ../SU2_CFD/src/drivers/CDriver.cpp:28:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:334:13: note: candidate 1: cplx cplx::operator/(const int&) const
 inline cplx cplx::operator/(const int& i) const
             ^~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:100:15: note: candidate 2: cplx cplx::operator/(const long unsigned int&)
   inline cplx operator/(const long unsigned int& a){ return complex<double>(*this)/double(a); }
               ^~~~~~~~
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h: At global scope:
../SU2_CFD/src/drivers/../../include/drivers/../../../Common/include/parallelization/../basic_types/../complexify.h:90:15: warning: inline function 'cplx cplx::operator*(const long unsigned int&) const' used but never defined
   inline cplx operator*(const long unsigned int&) const; // BJB
               ^~~~~~~~
ninja: build stopped: subcommand failed.
